//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ErplyAPI.New.CRM
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public AddressesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get addresses
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">address Ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="customerIds">customer Id</param>
        /// <param name="typeIds">address type Id</param>
        /// <param name="street">street</param>
        /// <param name="address2">address2</param>
        /// <param name="postCode">post Code</param>
        /// <param name="city">city</param>
        /// <param name="country">country</param>
        /// <param name="state">state</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerAddressResponse>> AddressesGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, int? changed = null, System.Collections.Generic.IEnumerable<int> customerIds = null, System.Collections.Generic.IEnumerable<int> typeIds = null, string street = null, string address2 = null, string postCode = null, string city = null, string country = null, string state = null, string orderBy = null, OrderByDirection? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/addresses?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerIds != null)
            {
                foreach (var item_ in customerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (typeIds != null)
            {
                foreach (var item_ in typeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("typeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (street != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("street") + "=").Append(System.Uri.EscapeDataString(ConvertToString(street, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (address2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerAddressResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an address
        /// </summary>
        /// <param name="addressRequest">addressRequest</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AddressesPostAsync(CreateAddressRequest addressRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addressRequest == null)
                throw new System.ArgumentNullException("addressRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/addresses");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(addressRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete addresses
        /// </summary>
        /// <param name="ids">up to 100 semicolon separated address Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> AddressesDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/addresses/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an address
        /// </summary>
        /// <param name="id">address Id</param>
        /// <param name="addressRequest">addressRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AddressesPatchAsync(int id, UpdateAddressRequest addressRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (addressRequest == null)
                throw new System.ArgumentNullException("addressRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/addresses/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(addressRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_TypesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Address_TypesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get address types
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">address type Ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="isActivelyUsed">Indicates whether this is a type of actively used addresses, or a type of archived/old addresses. Address which has a type where isActivelyUsed=false cannot be used as a customer's shipping address on invoice.</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AddressTypeResponse>> TypesAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, int? changed = null, bool? isActivelyUsed = null, string orderBy = null, OrderByDirection2? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/addresses/types?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isActivelyUsed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isActivelyUsed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isActivelyUsed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AddressTypeResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public AttributesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read Attributes
        /// </summary>
        /// <param name="entityName">attribute entity name, The possible entities are: customer, customer group</param>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="recordIds">records are the objects that have the attributes. The parameter can contain up to 100 semicolon delimited ids.</param>
        /// <param name="name">attribute name</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">amount to take</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AttributeResponse>> AttributesGetAsync(string entityName, string match = null, System.Collections.Generic.IEnumerable<int> recordIds = null, string name = null, string orderBy = null, OrderByDirection3? orderByDirection = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityName == null)
                throw new System.ArgumentNullException("entityName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/attributes?");
            urlBuilder_.Append(System.Uri.EscapeDataString("entityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recordIds != null)
            {
                foreach (var item_ in recordIds) { urlBuilder_.Append(System.Uri.EscapeDataString("recordIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AttributeResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Attach / Update an Attribute
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AttributesPutAsync(AttributeRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/attributes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete attributes
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> AttributesDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/attributes/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Business_AreasClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Business_AreasClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get areas of business
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">area of business ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BusinessAreaResponse>> AreasGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, string orderBy = null, OrderByDirection4? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/business/areas?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BusinessAreaResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an area of business
        /// </summary>
        /// <param name="businessAreaRequest">businessAreaRequest</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AreasPostAsync(BusinessAreaRequest businessAreaRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (businessAreaRequest == null)
                throw new System.ArgumentNullException("businessAreaRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/business/areas");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(businessAreaRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete areas of business
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited area of business ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> AreasDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/business/areas/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an area of business
        /// </summary>
        /// <param name="id">area of business id</param>
        /// <param name="businessAreaRequest">businessAreaRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AreasPatchAsync(int id, BusinessAreaRequest businessAreaRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (businessAreaRequest == null)
                throw new System.ArgumentNullException("businessAreaRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/business/areas/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(businessAreaRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomersClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public CustomersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all customers
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by the customer ids</param>
        /// <param name="businessTypeIds">Search by the business type ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="customerGroupIds">Search by the customer group ids</param>
        /// <param name="businessAreaIds">Search by the business area ids</param>
        /// <param name="jobTitleIds">Search by the Person's job title ids</param>
        /// <param name="employerIds">Search by the employer ids. (Persons only.) Business where this individual is an employee / a contact person</param>
        /// <param name="customerManagerIds">Search by the customer manager ids</param>
        /// <param name="titleIds">Search by the title ids. A title (Mr / Mrs / Miss) etc.</param>
        /// <param name="eInvoiceEmail">Search by the e-invoice email address</param>
        /// <param name="eInvoicesViaEmailEnabled">whether the customer wants to receive invoices via electronic channels.</param>
        /// <param name="invoicesViaEmailEnabled">whether the customer wants to receive invoices via email.</param>
        /// <param name="paperMailsEnabled">whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).</param>
        /// <param name="operatorId">Search by the operator id. E-invoice integration parameter.</param>
        /// <param name="ediCode">Search by the edi codeE-invoice integration parameter.</param>
        /// <param name="lastName">Search by the last name / family name. For individuals only.</param>
        /// <param name="firstName">Search by the first name / given name. For individuals only.</param>
        /// <param name="businessName">Search by the business name, For businesses only.</param>
        /// <param name="fullName">Search by the Full name of the customer</param>
        /// <param name="code">Search by the national Id</param>
        /// <param name="birthDate">Search by the person's birthday</param>
        /// <param name="vatNumber">Search by the VAT number</param>
        /// <param name="bankName">Search by the name of the bank</param>
        /// <param name="bankAccountNumber">Search by the customer's bank account number</param>
        /// <param name="bankSwiftCode">Search by the BIC/SWIFT identifier of customer's bank account</param>
        /// <param name="bankIban">Search by the IBAN number of customer's bank account</param>
        /// <param name="phone">Search by phone</param>
        /// <param name="mobile">Search by mobile</param>
        /// <param name="fax">Search by fax</param>
        /// <param name="mail">Search by mail</param>
        /// <param name="skype">Search by skype</param>
        /// <param name="website">Search by website</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="webShopUsername">Search by the web-shop username. This is for web shop integrations: to store customers' web-shop login credentials in Erply</param>
        /// <param name="salesForCashOnly">Search by the flag “Sales for cash only”. By default false</param>
        /// <param name="creditLimit">Search by the customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe</param>
        /// <param name="defaultPaymentDeadLine">Search by the default payment deadline (in days)</param>
        /// <param name="penaltyForOverdue">Search by the late fee / penalty for overdue invoices</param>
        /// <param name="payerIds">Search by the payer ids, payer of invoices is another customer</param>
        /// <param name="countryIds">Search by the customer’s country</param>
        /// <param name="homeStoreIds">Search by the home store ids, the most commonly used locations</param>
        /// <param name="referenceNumber">Search by the customer’s reference number for sales invoices</param>
        /// <param name="integrationCode">Search by the integration code. Corresponding customer identifier in a system integrated with Erply (eg. accounting software)</param>
        /// <param name="loyaltyCardNumber">Search by the loyalty card number. The code of customer's loyalty/membership card. This code must match the sequence produced by card swipe</param>
        /// <param name="factoringContractNumber">Search by the factoring contract number</param>
        /// <param name="type">Customer type. Possible values are</param>
        /// <param name="priceListIds">Search by the assigned price list</param>
        /// <param name="priceListIds2">Search by the second assigned price list</param>
        /// <param name="priceListIds3">Search by the third assigned price list</param>
        /// <param name="tagIds">Search by tagIds. Get all customers with at least one of those tags</param>
        /// <param name="taxOfficeIds">Search by the tax office ids. Feature used by Greek customers: office where the customer / supplier reports to.</param>
        /// <param name="color">Search by color. Color that the customer entry is marked with. Possible values:</param>
        /// <param name="added">Search by added date.</param>
        /// <param name="isStarred">Mark if a customer should be starred</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerResponse>> CustomersAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> businessTypeIds = null, int? changed = null, System.Collections.Generic.IEnumerable<int> customerGroupIds = null, System.Collections.Generic.IEnumerable<int> businessAreaIds = null, System.Collections.Generic.IEnumerable<int> jobTitleIds = null, System.Collections.Generic.IEnumerable<int> employerIds = null, System.Collections.Generic.IEnumerable<int> customerManagerIds = null, System.Collections.Generic.IEnumerable<int> titleIds = null, string eInvoiceEmail = null, bool? eInvoicesViaEmailEnabled = null, bool? invoicesViaEmailEnabled = null, bool? paperMailsEnabled = null, string operatorId = null, string ediCode = null, string lastName = null, string firstName = null, string businessName = null, string fullName = null, string code = null, string birthDate = null, string vatNumber = null, string bankName = null, string bankAccountNumber = null, string bankSwiftCode = null, string bankIban = null, string phone = null, string mobile = null, string fax = null, string mail = null, string skype = null, string website = null, string notes = null, string webShopUsername = null, bool? salesForCashOnly = null, int? creditLimit = null, int? defaultPaymentDeadLine = null, double? penaltyForOverdue = null, System.Collections.Generic.IEnumerable<int> payerIds = null, System.Collections.Generic.IEnumerable<int> countryIds = null, System.Collections.Generic.IEnumerable<int> homeStoreIds = null, string referenceNumber = null, string integrationCode = null, string loyaltyCardNumber = null, string factoringContractNumber = null, Type? type = null, System.Collections.Generic.IEnumerable<int> priceListIds = null, System.Collections.Generic.IEnumerable<int> priceListIds2 = null, System.Collections.Generic.IEnumerable<int> priceListIds3 = null, System.Collections.Generic.IEnumerable<int> tagIds = null, System.Collections.Generic.IEnumerable<int> taxOfficeIds = null, string color = null, int? added = null, bool? isStarred = null, string orderBy = null, OrderByDirection5? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(String.Join(",", ids));
            }
            if (businessTypeIds != null)
            {
                foreach (var item_ in businessTypeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("businessTypeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerGroupIds != null)
            {
                foreach (var item_ in customerGroupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerGroupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (businessAreaIds != null)
            {
                foreach (var item_ in businessAreaIds) { urlBuilder_.Append(System.Uri.EscapeDataString("businessAreaIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (jobTitleIds != null)
            {
                foreach (var item_ in jobTitleIds) { urlBuilder_.Append(System.Uri.EscapeDataString("jobTitleIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (employerIds != null)
            {
                foreach (var item_ in employerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("employerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerManagerIds != null)
            {
                foreach (var item_ in customerManagerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerManagerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (titleIds != null)
            {
                foreach (var item_ in titleIds) { urlBuilder_.Append(System.Uri.EscapeDataString("titleIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (eInvoiceEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoiceEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoiceEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eInvoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paperMailsEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paperMailsEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paperMailsEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operatorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operatorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operatorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ediCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ediCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ediCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("businessName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(businessName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (birthDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("birthDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(birthDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vatNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vatNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vatNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankSwiftCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankSwiftCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankSwiftCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankIban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankIban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankIban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mobile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mobile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mobile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fax") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fax, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skype != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skype, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (website != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("website") + "=").Append(System.Uri.EscapeDataString(ConvertToString(website, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webShopUsername != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webShopUsername") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webShopUsername, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesForCashOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesForCashOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesForCashOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creditLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creditLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (defaultPaymentDeadLine != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("defaultPaymentDeadLine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaultPaymentDeadLine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (penaltyForOverdue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("penaltyForOverdue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(penaltyForOverdue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payerIds != null)
            {
                foreach (var item_ in payerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (countryIds != null)
            {
                foreach (var item_ in countryIds) { urlBuilder_.Append(System.Uri.EscapeDataString("countryIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (homeStoreIds != null)
            {
                foreach (var item_ in homeStoreIds) { urlBuilder_.Append(System.Uri.EscapeDataString("homeStoreIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (referenceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (integrationCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("integrationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(integrationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loyaltyCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loyaltyCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loyaltyCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (factoringContractNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("factoringContractNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(factoringContractNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priceListIds != null)
            {
                foreach (var item_ in priceListIds) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds2 != null)
            {
                foreach (var item_ in priceListIds2) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds3 != null)
            {
                foreach (var item_ in priceListIds3) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds3") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tagIds != null)
            {
                foreach (var item_ in tagIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tagIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (taxOfficeIds != null)
            {
                foreach (var item_ in taxOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("taxOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (color != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("color") + "=").Append(System.Uri.EscapeDataString(ConvertToString(color, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (added != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("added") + "=").Append(System.Uri.EscapeDataString(ConvertToString(added, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isStarred != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isStarred") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isStarred, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lookup customers
        /// </summary>
        /// <param name="lookupPhrase">text to lookup, must be at least 3 characters in length, if quotes are applied a string match is returned</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerResponse>> FullTextLookupAsync(string lookupPhrase, string orderBy = null, OrderByDirection7? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lookupPhrase == null)
                throw new System.ArgumentNullException("lookupPhrase");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/full-text-lookup?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lookupPhrase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lookupPhrase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Business_CustomersClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Business_CustomersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get business customers
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by customer Ids</param>
        /// <param name="typeIds">Search by customer type ids</param>
        /// <param name="customerGroupIds">Search by customer group ids</param>
        /// <param name="businessAreaIds">Search by the business area ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="customerManagerIds">Search by customer manager ids</param>
        /// <param name="eInvoiceEmail">Search by the e-invoice email address</param>
        /// <param name="eInvoicesViaEmailEnabled">whether the customer wants to receive invoices via electronic channels.</param>
        /// <param name="invoicesViaEmailEnabled">whether the customer wants to receive invoices via email.</param>
        /// <param name="paperMailsEnabled">whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).</param>
        /// <param name="operatorId">Search by the operator id. E-invoice integration parameter.</param>
        /// <param name="ediCode">Search by the edi code. E-invoice integration parameter.</param>
        /// <param name="name">Search by the company name.</param>
        /// <param name="displayedName">Search by the displayed name. Name with customer type</param>
        /// <param name="fullName">Search by the full name. Displayed name 2</param>
        /// <param name="code">Search by the national id</param>
        /// <param name="vatNumber">Search by the VAT number</param>
        /// <param name="bankName">Search by the name of the bank</param>
        /// <param name="bankAccountNumber">Search by the customer's bank account number</param>
        /// <param name="bankSwiftCode">Search by the BIC/SWIFT identifier of customer's bank account.</param>
        /// <param name="bankIban">Search by the IBAN number of customer's bank account.</param>
        /// <param name="phone">Search by phone</param>
        /// <param name="mobile">Search by mobile</param>
        /// <param name="fax">Search by fax</param>
        /// <param name="mail">Search by mail</param>
        /// <param name="skype">Search by skype</param>
        /// <param name="website">Search by website</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="webShopUsername">Search by the web-shop username. This is for web shop integrations: to store customers' web-shop login credentials in Erply.</param>
        /// <param name="salesForCashOnly">Search by the flag “Sales for cash only”. By default false</param>
        /// <param name="creditLimit">Search by the customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.</param>
        /// <param name="defaultPaymentDeadLine">Search by the default payment deadline (in days).</param>
        /// <param name="penaltyForOverdue">Search by the late fee / penalty for overdue invoices.</param>
        /// <param name="payerIds">Search by payer ids. Payer of invoices is another customer.</param>
        /// <param name="countryIds">Search by the customer’s country ids.</param>
        /// <param name="homeStoreIds">Search by the home store ids, the most commonly used locations</param>
        /// <param name="referenceNumber">Search by customer’s reference number for sales invoices.</param>
        /// <param name="integrationCode">Search by the integration code. A corresponding customer identifier in a system integrated with Erply (eg. accounting software)</param>
        /// <param name="loyaltyCardNumber">Search by the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.</param>
        /// <param name="factoringContractNumber">Search by the factoring contract number.</param>
        /// <param name="type">Search by the customer type. Possible values are</param>
        /// <param name="priceListIds">Search by the assigned price list</param>
        /// <param name="priceListIds2">Search by the second assigned price list</param>
        /// <param name="priceListIds3">Search by the third assigned price list</param>
        /// <param name="taxOfficeIds">Search by the tax office ids. Feature used by Greek customers: office where the customer / supplier reports to.</param>
        /// <param name="color">Search by color. Color that the customer entry is marked with. Possible values: '', 'yellow', 'red', 'blue', 'green'.</param>
        /// <param name="isStarred">Mark if customers should be starred</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BusinessCustomerResponse>> BusinessesGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> typeIds = null, System.Collections.Generic.IEnumerable<int> customerGroupIds = null, System.Collections.Generic.IEnumerable<int> businessAreaIds = null, int? changed = null, System.Collections.Generic.IEnumerable<int> customerManagerIds = null, string eInvoiceEmail = null, bool? eInvoicesViaEmailEnabled = null, bool? invoicesViaEmailEnabled = null, bool? paperMailsEnabled = null, string operatorId = null, string ediCode = null, string name = null, string displayedName = null, string fullName = null, string code = null, string vatNumber = null, string bankName = null, string bankAccountNumber = null, string bankSwiftCode = null, string bankIban = null, string phone = null, string mobile = null, string fax = null, string mail = null, string skype = null, string website = null, string notes = null, string webShopUsername = null, bool? salesForCashOnly = null, int? creditLimit = null, int? defaultPaymentDeadLine = null, double? penaltyForOverdue = null, System.Collections.Generic.IEnumerable<int> payerIds = null, System.Collections.Generic.IEnumerable<int> countryIds = null, System.Collections.Generic.IEnumerable<int> homeStoreIds = null, string referenceNumber = null, string integrationCode = null, string loyaltyCardNumber = null, string factoringContractNumber = null, Type2? type = null, System.Collections.Generic.IEnumerable<int> priceListIds = null, System.Collections.Generic.IEnumerable<int> priceListIds2 = null, System.Collections.Generic.IEnumerable<int> priceListIds3 = null, System.Collections.Generic.IEnumerable<int> taxOfficeIds = null, string color = null, bool? isStarred = null, string orderBy = null, OrderByDirection6? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (typeIds != null)
            {
                foreach (var item_ in typeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("typeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerGroupIds != null)
            {
                foreach (var item_ in customerGroupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerGroupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (businessAreaIds != null)
            {
                foreach (var item_ in businessAreaIds) { urlBuilder_.Append(System.Uri.EscapeDataString("businessAreaIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerManagerIds != null)
            {
                foreach (var item_ in customerManagerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerManagerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (eInvoiceEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoiceEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoiceEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eInvoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paperMailsEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paperMailsEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paperMailsEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operatorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operatorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operatorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ediCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ediCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ediCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (displayedName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("displayedName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(displayedName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vatNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vatNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vatNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankSwiftCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankSwiftCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankSwiftCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankIban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankIban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankIban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mobile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mobile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mobile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fax") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fax, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skype != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skype, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (website != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("website") + "=").Append(System.Uri.EscapeDataString(ConvertToString(website, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webShopUsername != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webShopUsername") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webShopUsername, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesForCashOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesForCashOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesForCashOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creditLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creditLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (defaultPaymentDeadLine != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("defaultPaymentDeadLine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaultPaymentDeadLine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (penaltyForOverdue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("penaltyForOverdue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(penaltyForOverdue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payerIds != null)
            {
                foreach (var item_ in payerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (countryIds != null)
            {
                foreach (var item_ in countryIds) { urlBuilder_.Append(System.Uri.EscapeDataString("countryIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (homeStoreIds != null)
            {
                foreach (var item_ in homeStoreIds) { urlBuilder_.Append(System.Uri.EscapeDataString("homeStoreIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (referenceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (integrationCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("integrationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(integrationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loyaltyCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loyaltyCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loyaltyCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (factoringContractNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("factoringContractNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(factoringContractNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priceListIds != null)
            {
                foreach (var item_ in priceListIds) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds2 != null)
            {
                foreach (var item_ in priceListIds2) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds3 != null)
            {
                foreach (var item_ in priceListIds3) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds3") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (taxOfficeIds != null)
            {
                foreach (var item_ in taxOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("taxOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (color != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("color") + "=").Append(System.Uri.EscapeDataString(ConvertToString(color, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isStarred != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isStarred") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isStarred, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BusinessCustomerResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a business customer
        /// </summary>
        /// <param name="customer">Customer</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> BusinessesPostAsync(CreateCompanyRequest customer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create business customers in bulk
        /// </summary>
        /// <param name="requests">Requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseWithResults> BulkPostAsync(CreateCompanyRequest2 requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requests == null)
                throw new System.ArgumentNullException("requests");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses/bulk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(requests, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseWithResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update business customers in bulk
        /// </summary>
        /// <param name="requests">Requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseWithResults> BulkPatchAsync(UpdateCompanyRequest2 requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requests == null)
                throw new System.ArgumentNullException("requests");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses/bulk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(requests, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseWithResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete business customers
        /// </summary>
        /// <param name="ids">up to 100 semicolon separated customer Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> BusinessesDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a business customer
        /// </summary>
        /// <param name="id">customer Id</param>
        /// <param name="customer">customer</param>
        /// <param name="preserveOldCardNumber">if the flag is present, then the previous card number value gets saved as an old card number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> BusinessesPatchAsync(int id, UpdateCompanyRequest customer, bool? preserveOldCardNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (preserveOldCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("preserveOldCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(preserveOldCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Turn a business customer into an individual customer
        /// </summary>
        /// <param name="id">customer Id</param>
        /// <param name="customer">customer</param>
        /// <param name="preserveOldCardNumber">if the flag is present, then the previous card number value gets saved as an old card number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TurnIntoIndividualAsync(int id, UpdateIndividualRequest customer, bool? preserveOldCardNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/businesses/{id}/turn-into-individual?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (preserveOldCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("preserveOldCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(preserveOldCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer_External_IdsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Customer_External_IdsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read external Ids of the customers
        /// </summary>
        /// <param name="externalIds">up to 100 external Ids. Cannot be provided with the customerIds parameter</param>
        /// <param name="customerIds">up to 100 customer Ids. Cannot be provided with the externalIds parameter</param>
        /// <param name="integrationName">integration name</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExternalIDResponse>> ExternalIdsGetAsync(System.Collections.Generic.IEnumerable<string> externalIds = null, System.Collections.Generic.IEnumerable<int> customerIds = null, string integrationName = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/external-ids?");
            if (externalIds != null)
            {
                foreach (var item_ in externalIds) { urlBuilder_.Append(System.Uri.EscapeDataString("externalIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIds != null)
            {
                foreach (var item_ in customerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (integrationName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("integrationName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(integrationName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExternalIDResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete external Ids of customers
        /// </summary>
        /// <param name="customerIds">up to 100 semicolon delimited customer Ids</param>
        /// <param name="integrationName">Specify the integration name to delete the external Id associated with the integration only.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> ExternalIdsDeleteAsync(string customerIds, string integrationName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerIds == null)
                throw new System.ArgumentNullException("customerIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/external-ids/{customerIds}?");
            urlBuilder_.Replace("{customerIds}", System.Uri.EscapeDataString(ConvertToString(customerIds, System.Globalization.CultureInfo.InvariantCulture)));
            if (integrationName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("integrationName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(integrationName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Attach external customer ID to a customer
        /// </summary>
        /// <param name="externalIdWithIntegrationName">external ID with the integration name</param>
        /// <param name="customerId">customer Id</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmptyResponse> ExternalIdsPostAsync(ExternalIDRequest externalIdWithIntegrationName, int customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (externalIdWithIntegrationName == null)
                throw new System.ArgumentNullException("externalIdWithIntegrationName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/external-ids/{customerId}");
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(externalIdWithIntegrationName, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmptyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update external Id of a customer
        /// </summary>
        /// <param name="externalIdWithIntegrationName">external Id with the integration name</param>
        /// <param name="customerId">customer Id</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> ExternalIdsPatchAsync(ExternalIDRequest externalIdWithIntegrationName, int customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (externalIdWithIntegrationName == null)
                throw new System.ArgumentNullException("externalIdWithIntegrationName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/external-ids/{customerId}");
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(externalIdWithIntegrationName, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer_GroupsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Customer_GroupsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer groups
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">group Ids</param>
        /// <param name="parentIds">parent group ids</param>
        /// <param name="order">group's order</param>
        /// <param name="priceListIds">price list ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerGroupResponse>> GroupsGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> parentIds = null, int? order = null, System.Collections.Generic.IEnumerable<int> priceListIds = null, string orderBy = null, OrderByDirection8? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (parentIds != null)
            {
                foreach (var item_ in parentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("parentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priceListIds != null)
            {
                foreach (var item_ in priceListIds) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerGroupResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a customer group
        /// </summary>
        /// <param name="groupRequest">groupRequest</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GroupsPostAsync(CreateCustomerGroupRequest groupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupRequest == null)
                throw new System.ArgumentNullException("groupRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(groupRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Indented List of Groups
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result2>> IndentedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups/indented");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Result2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete customer groups
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited group Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> GroupsDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a customer group
        /// </summary>
        /// <param name="id">Group Id</param>
        /// <param name="groupRequest">groupRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GroupsPatchAsync(int id, UpdateCustomerGroupRequest groupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (groupRequest == null)
                throw new System.ArgumentNullException("groupRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(groupRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add customers to a group
        /// </summary>
        /// <param name="id">group Id</param>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> CustomersAsync(int id, AddCustomersToGroupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups/{id}/customers");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a customer group
        /// </summary>
        /// <param name="id">group Id</param>
        /// <param name="moveRequest">moveRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> MoveAsync(int id, MoveRequest moveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (moveRequest == null)
                throw new System.ArgumentNullException("moveRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/groups/{id}/move");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(moveRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Individual_CustomersClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Individual_CustomersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get individual customers
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by the customer ids</param>
        /// <param name="customerGroupIds">Search by the customer group ids</param>
        /// <param name="businessAreaIds">Search by the business area ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="jobTitleIds">Search by the individual's job title ids</param>
        /// <param name="employerIds">Search by the employer ids</param>
        /// <param name="customerManagerIds">Search by the customer manager ids</param>
        /// <param name="titleIds">Search by the title ids. A title (Mr / Mrs / Miss) etc.</param>
        /// <param name="eInvoiceEmail">Search by the e-invoice email address</param>
        /// <param name="eInvoicesViaEmailEnabled">whether the customer wants to receive invoices via electronic channels.</param>
        /// <param name="invoicesViaEmailEnabled">whether the customer wants to receive invoices via email.</param>
        /// <param name="paperMailsEnabled">whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).</param>
        /// <param name="operatorId">Search by the operator id. E-invoice integration parameter.</param>
        /// <param name="ediCode">Search by the edi code. E-invoice integration parameter.</param>
        /// <param name="lastName">Search by the last name / family name.</param>
        /// <param name="firstName">Search by the first name / given name.</param>
        /// <param name="displayedName">Search by the displayed name. Name with customer type</param>
        /// <param name="fullName">Search by the full name. First name and Last name</param>
        /// <param name="code">Search by the national id</param>
        /// <param name="birthDate">Search by the date of birth (yyyy-mm-dd)</param>
        /// <param name="vatNumber">Search by the VAT number</param>
        /// <param name="bankName">Search by the name of the bank</param>
        /// <param name="bankAccountNumber">Search by the customer's bank account number</param>
        /// <param name="bankSwiftCode">Search by the BIC/SWIFT identifier of customer's bank account</param>
        /// <param name="bankIban">Search by the IBAN number of customer's bank account</param>
        /// <param name="phone">Search by phone</param>
        /// <param name="mobile">Search by mobile</param>
        /// <param name="fax">Search by fax</param>
        /// <param name="mail">Search by mail</param>
        /// <param name="skype">Search by skype</param>
        /// <param name="website">Search by website</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="webShopUsername">Search by the web-shop username. This is for web shop integrations: to store customers' web-shop login credentials in Erply</param>
        /// <param name="salesForCashOnly">Flag “Sales for cash only”. By default false</param>
        /// <param name="creditLimit">Search by the customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe</param>
        /// <param name="defaultPaymentDeadLine">Search by the default payment deadline (in days)</param>
        /// <param name="penaltyForOverdue">Search by the late fee / penalty for overdue invoices</param>
        /// <param name="payerIds">Search by the payer ids. Payer of invoices is another customer</param>
        /// <param name="countryIds">Search by the customer’s country.</param>
        /// <param name="homeStoreIds">Search by the home store ids, the most commonly used location</param>
        /// <param name="referenceNumber">Search by the customer’s reference number for sales invoices.</param>
        /// <param name="integrationCode">Search by the integration code. Corresponding customer identifier in a system integrated with Erply (eg. accounting software)</param>
        /// <param name="loyaltyCardNumber">Search by the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.</param>
        /// <param name="factoringContractNumber">Search by the factoring contract number.</param>
        /// <param name="type">Search by the customer type. Possible values are</param>
        /// <param name="priceListIds">Search by the assigned price list</param>
        /// <param name="priceListIds2">Search by the second assigned price list</param>
        /// <param name="priceListIds3">Search by the third assigned price list</param>
        /// <param name="taxOfficeIds">Search by the tax office ids. Feature used by Greek customers: office where the customer / supplier reports to.</param>
        /// <param name="color">Search by color. Color that the customer entry is marked with. Possible values:</param>
        /// <param name="isStarred">Mark if the customers should be starred</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IndividualCustomerResponse>> IndividualsGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> customerGroupIds = null, System.Collections.Generic.IEnumerable<int> businessAreaIds = null, int? changed = null, System.Collections.Generic.IEnumerable<int> jobTitleIds = null, System.Collections.Generic.IEnumerable<int> employerIds = null, System.Collections.Generic.IEnumerable<int> customerManagerIds = null, System.Collections.Generic.IEnumerable<int> titleIds = null, string eInvoiceEmail = null, bool? eInvoicesViaEmailEnabled = null, bool? invoicesViaEmailEnabled = null, bool? paperMailsEnabled = null, string operatorId = null, string ediCode = null, string lastName = null, string firstName = null, string displayedName = null, string fullName = null, string code = null, string birthDate = null, string vatNumber = null, string bankName = null, string bankAccountNumber = null, string bankSwiftCode = null, string bankIban = null, string phone = null, string mobile = null, string fax = null, string mail = null, string skype = null, string website = null, string notes = null, string webShopUsername = null, bool? salesForCashOnly = null, int? creditLimit = null, int? defaultPaymentDeadLine = null, double? penaltyForOverdue = null, System.Collections.Generic.IEnumerable<int> payerIds = null, System.Collections.Generic.IEnumerable<int> countryIds = null, System.Collections.Generic.IEnumerable<int> homeStoreIds = null, string referenceNumber = null, string integrationCode = null, string loyaltyCardNumber = null, string factoringContractNumber = null, Type3? type = null, System.Collections.Generic.IEnumerable<int> priceListIds = null, System.Collections.Generic.IEnumerable<int> priceListIds2 = null, System.Collections.Generic.IEnumerable<int> priceListIds3 = null, System.Collections.Generic.IEnumerable<int> taxOfficeIds = null, string color = null, bool? isStarred = null, string orderBy = null, OrderByDirection9? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerGroupIds != null)
            {
                foreach (var item_ in customerGroupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerGroupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (businessAreaIds != null)
            {
                foreach (var item_ in businessAreaIds) { urlBuilder_.Append(System.Uri.EscapeDataString("businessAreaIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (jobTitleIds != null)
            {
                foreach (var item_ in jobTitleIds) { urlBuilder_.Append(System.Uri.EscapeDataString("jobTitleIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (employerIds != null)
            {
                foreach (var item_ in employerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("employerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerManagerIds != null)
            {
                foreach (var item_ in customerManagerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerManagerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (titleIds != null)
            {
                foreach (var item_ in titleIds) { urlBuilder_.Append(System.Uri.EscapeDataString("titleIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (eInvoiceEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoiceEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoiceEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eInvoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eInvoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eInvoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoicesViaEmailEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoicesViaEmailEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoicesViaEmailEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paperMailsEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paperMailsEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paperMailsEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operatorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operatorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operatorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ediCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ediCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ediCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (displayedName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("displayedName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(displayedName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fullName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fullName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fullName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (birthDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("birthDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(birthDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vatNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vatNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vatNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankSwiftCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankSwiftCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankSwiftCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankIban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankIban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankIban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mobile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mobile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mobile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fax") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fax, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skype != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skype, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (website != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("website") + "=").Append(System.Uri.EscapeDataString(ConvertToString(website, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webShopUsername != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webShopUsername") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webShopUsername, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (salesForCashOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("salesForCashOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(salesForCashOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creditLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creditLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (defaultPaymentDeadLine != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("defaultPaymentDeadLine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaultPaymentDeadLine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (penaltyForOverdue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("penaltyForOverdue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(penaltyForOverdue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payerIds != null)
            {
                foreach (var item_ in payerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (countryIds != null)
            {
                foreach (var item_ in countryIds) { urlBuilder_.Append(System.Uri.EscapeDataString("countryIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (homeStoreIds != null)
            {
                foreach (var item_ in homeStoreIds) { urlBuilder_.Append(System.Uri.EscapeDataString("homeStoreIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (referenceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (integrationCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("integrationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(integrationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loyaltyCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loyaltyCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loyaltyCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (factoringContractNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("factoringContractNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(factoringContractNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priceListIds != null)
            {
                foreach (var item_ in priceListIds) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds2 != null)
            {
                foreach (var item_ in priceListIds2) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priceListIds3 != null)
            {
                foreach (var item_ in priceListIds3) { urlBuilder_.Append(System.Uri.EscapeDataString("priceListIds3") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (taxOfficeIds != null)
            {
                foreach (var item_ in taxOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("taxOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (color != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("color") + "=").Append(System.Uri.EscapeDataString(ConvertToString(color, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isStarred != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isStarred") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isStarred, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IndividualCustomerResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an individual customer
        /// </summary>
        /// <param name="customer">Customer</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> IndividualsPostAsync(CreateIndividualRequest customer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create individual customers in bulk
        /// </summary>
        /// <param name="requests">Requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseWithResults> BulkPostAsync(CreateIndividualRequest2 requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requests == null)
                throw new System.ArgumentNullException("requests");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/bulk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(requests, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseWithResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update individual customers in bulk
        /// </summary>
        /// <param name="requests">Requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResponseWithResults> BulkPatchAsync(UpdateIndividualRequest2 requests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requests == null)
                throw new System.ArgumentNullException("requests");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/bulk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(requests, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResponseWithResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete individual customers
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited customer Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> IndividualsDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an individual customer
        /// </summary>
        /// <param name="id">customer Id</param>
        /// <param name="customer">customer</param>
        /// <param name="preserveOldCardNumber">if the flag is present, then the previous card number value gets saved as an old card number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> IndividualsPatchAsync(int id, UpdateIndividualRequest customer, bool? preserveOldCardNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (preserveOldCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("preserveOldCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(preserveOldCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Turn an individual customer into a business customer
        /// </summary>
        /// <param name="id">customer Id</param>
        /// <param name="customer">customer</param>
        /// <param name="preserveOldCardNumber">if the flag is present, then the previous card number value gets saved as an old card number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TurnIntoBusinessAsync(int id, UpdateCompanyRequest customer, bool? preserveOldCardNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customer == null)
                throw new System.ArgumentNullException("customer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/{id}/turn-into-business?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (preserveOldCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("preserveOldCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(preserveOldCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(customer, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Job_TitlesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Job_TitlesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get job titles
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">title Ids</param>
        /// <param name="order">title's order</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobTitleResponse>> JobTitlesGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, int? order = null, string orderBy = null, OrderByDirection10? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/job-titles?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JobTitleResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a job title
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> JobTitlesPostAsync(JobTitleRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/job-titles");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete job titles
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited job title ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> JobTitlesDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/job-titles/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a job title
        /// </summary>
        /// <param name="id">job title id</param>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> JobTitlesPatchAsync(int id, JobTitleRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/job-titles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a job title
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="moveRequest">moveRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> MoveAsync(int id, MoveRequest moveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (moveRequest == null)
                throw new System.ArgumentNullException("moveRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/job-titles/{id}/move");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(moveRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TitlesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public TitlesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get individuals titles
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">title Ids</param>
        /// <param name="order">title's order</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TitleResponse>> TitlesGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, int? order = null, string orderBy = null, OrderByDirection11? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/titles?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TitleResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an individual's title
        /// </summary>
        /// <param name="titleRequest">titleRequest</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TitlesPostAsync(TitleRequest titleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (titleRequest == null)
                throw new System.ArgumentNullException("titleRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/titles");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(titleRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete individual titles
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited title Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> TitlesDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/titles/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an individual's title
        /// </summary>
        /// <param name="id">Title Id</param>
        /// <param name="titleRequest">titleRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TitlesPatchAsync(int id, TitleRequest titleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (titleRequest == null)
                throw new System.ArgumentNullException("titleRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/titles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(titleRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move an individual's title
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="moveRequest">moveRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> MoveAsync(int id, MoveRequest moveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (moveRequest == null)
                throw new System.ArgumentNullException("moveRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/individuals/titles/{id}/move");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(moveRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public TagsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customers tags
        /// </summary>
        /// <param name="ids">link Ids</param>
        /// <param name="tagIds">tag Ids</param>
        /// <param name="customerIds">customer Ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagToCustomerLinkResponse>> TagsGetAsync(System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> tagIds = null, System.Collections.Generic.IEnumerable<int> customerIds = null, string orderBy = null, OrderByDirection12? orderByDirection = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/tags?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tagIds != null)
            {
                foreach (var item_ in tagIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tagIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIds != null)
            {
                foreach (var item_ in customerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TagToCustomerLinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Attach tag to a customer
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TagsPostAsync(TagToCustomerLinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a tag from a customer
        /// </summary>
        /// <param name="tagId">tag Id</param>
        /// <param name="customerId">customer Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> TagsDeleteAsync(int tagId, int customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tagId == null)
                throw new System.ArgumentNullException("tagId");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/{customerId}/tags/{tagId}");
            urlBuilder_.Replace("{tagId}", System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tags
        /// </summary>
        /// <param name="ids">tag Ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagResponse>> TagsGetAsync(System.Collections.Generic.IEnumerable<int> ids = null, string orderBy = null, OrderByDirection15? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TagResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tag
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TagsPostAsync(TagRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete tags
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited tag Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> TagsDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a tag
        /// </summary>
        /// <param name="id">tag Id</param>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TagsPatchAsync(int id, TagRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer_TypesClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Customer_TypesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get customer types
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">customer type Ids</param>
        /// <param name="changed">Retrieve only items that have been added or modified at/after/before a specified timestamp. Use it to keep a local database in sync with Erply.</param>
        /// <param name="order">customer type's order</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyTypeResponse>> TypesAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, int? changed = null, int? order = null, string orderBy = null, OrderByDirection13? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/customers/types?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (changed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("changed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(changed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CompanyTypeResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loyalty_CardsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Loyalty_CardsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get old card numbers
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">old card number ids</param>
        /// <param name="customerIds">customer ids</param>
        /// <param name="cardNumber">card number</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OldCardNumberResponse>> OldNumbersGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> customerIds = null, string cardNumber = null, string orderBy = null, OrderByDirection14? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loyalty-cards/old-numbers?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIds != null)
            {
                foreach (var item_ in customerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OldCardNumberResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an old card number
        /// </summary>
        /// <param name="oldCardNumRequest">oldCardNumRequest</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> OldNumbersPostAsync(CreateOldCardNumberRequest oldCardNumRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (oldCardNumRequest == null)
                throw new System.ArgumentNullException("oldCardNumRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loyalty-cards/old-numbers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(oldCardNumRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete old card numbers
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited old card number ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> OldNumbersDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loyalty-cards/old-numbers/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an old card number
        /// </summary>
        /// <param name="id">old card number id</param>
        /// <param name="oldCardNumRequest">oldCardNumRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> OldNumbersPatchAsync(int id, UpdateOldCardNumberRequest oldCardNumRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (oldCardNumRequest == null)
                throw new System.ArgumentNullException("oldCardNumRequest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loyalty-cards/old-numbers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(oldCardNumRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Special_EndpointsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Special_EndpointsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Customers for Offline DB to sync
        /// </summary>
        /// <param name="lastModified">Last modification time (create/update)</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 8000 for this special endpoint</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OfflineDbCustomer>> CustomersAsync(int lastModified, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lastModified == null)
                throw new System.ArgumentNullException("lastModified");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/offline-db/sync/customers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lastModified") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastModified, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OfflineDbCustomer>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag_GroupsClient
    {
        private string _baseUrl = "https://api-crm-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Tag_GroupsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get groups of tags
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">group of tags Ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagGroupResponse>> GroupsGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, string orderBy = null, OrderByDirection16? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TagGroupResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a group of tags
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GroupsPostAsync(TagGroupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tags in groups
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">link Ids</param>
        /// <param name="tagIds">tag Ids</param>
        /// <param name="groupIds">group Ids</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagToGroupLinkResponse>> TagsGetAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> tagIds = null, System.Collections.Generic.IEnumerable<int> groupIds = null, string orderBy = null, OrderByDirection17? orderByDirection = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups/tags?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tagIds != null)
            {
                foreach (var item_ in tagIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tagIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (groupIds != null)
            {
                foreach (var item_ in groupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("groupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TagToGroupLinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add tag to a group
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TagsPostAsync(TagToGroupLinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups/tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete groups of tags
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited tag group Ids</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> GroupsDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a group of tags
        /// </summary>
        /// <param name="id">group of tags Id</param>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GroupsPatchAsync(int id, TagGroupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/groups/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a tag from a group
        /// </summary>
        /// <param name="tagId">tag Id</param>
        /// <param name="groupId">group Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GroupsDeleteAsync(int tagId, int groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tagId == null)
                throw new System.ArgumentNullException("tagId");

            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/tags/{tagId}/groups/{groupId}");
            urlBuilder_.Replace("{tagId}", System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddCustomersToGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerIDs")]
        public System.Collections.Generic.ICollection<int> CustomerIDs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressTypeResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isActivelyUsed")]
        public bool? IsActivelyUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessAreaRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessAreaResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessCustomerResponse
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// Registry code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country. Use PIM API or Erply Classic API to get this ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// Name with customer type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayedName")]
        public string DisplayedName { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId")]
        public int? PricelistId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId2")]
        public int? PricelistId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId3")]
        public int? PricelistId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxofficeId")]
        public int? TaxofficeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyTypeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("abbreviation")]
        public Translatable Abbreviation { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCompanyRequest
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// Registry code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId")]
        public int? PricelistId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId2")]
        public int? PricelistId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId3")]
        public int? PricelistId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxofficeId")]
        public int? TaxofficeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// type ID can be fetched from the GET customers/types endpoint
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCustomerGroupRequest
    {
        /// <summary>
        /// Check box “This customer group does not earn new reward points”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("doNotCollectRewardPoints")]
        public bool? DoNotCollectRewardPoints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public int? ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList2ID")]
        public int? PriceList2ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList3ID")]
        public int? PriceList3ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList4ID")]
        public int? PriceList4ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList5ID")]
        public int? PriceList5ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateIndividualRequest
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// LastName of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// Date of birth (yyyy-mm-dd)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// National ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        /// <summary>
        /// Used to indicate that this person is a contact person / an employee in a particular company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("employerId")]
        public int? EmployerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// First name / given name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Individual's job title Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobTitleId")]
        public int? JobTitleId { get; set; }

        /// <summary>
        /// Last name / family name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId2")]
        public int? PriceListId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId3")]
        public int? PriceListId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxOfficeId")]
        public int? TaxOfficeId { get; set; }

        /// <summary>
        /// A title (Mr / Mrs / Miss) etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleId")]
        public int? TitleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerGroupResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby")]
        public string Addedby { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby")]
        public string Changedby { get; set; }

        /// <summary>
        /// Check box “This customer group does not earn new reward points”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("doNotCollectRewardPoints")]
        public bool? DoNotCollectRewardPoints { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public int? ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList2ID")]
        public int? PriceList2ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList3ID")]
        public int? PriceList3ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList4ID")]
        public int? PriceList4ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList5ID")]
        public int? PriceList5ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerResponse
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// Person's birthday (yyyy-mm-dd)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// For businesses only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessName")]
        public string BusinessName { get; set; }

        /// <summary>
        /// Customer type ID, for businesses only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessTypeId")]
        public int? BusinessTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// National ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// COMPANY or PERSON.
        /// <br/>   For businesses, the following attributes are set: fullName, businessName (both have the same value).
        /// <br/>   For individuals, the following attributes are set: fullName, firstName, lastName. fullName is a combination of latter two: "lastName, firstName".
        /// <br/>fullName can be used for displaying customer's name wherever needed.
        /// <br/>   Companies should have one name field and the attribute that is edited should be businessName.
        /// <br/>   Persons should have separate fields for given name and surname (respective attributes: firstName, lastName).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerType")]
        public string CustomerType { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        /// <summary>
        /// Used to indicate that this individual is a contact person / an employee in a particular business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("employerId")]
        public int? EmployerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// First name / given name.  For individuals only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Full name of the customer, use for displaying customer name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Individual's job title Ids.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobTitleId")]
        public int? JobTitleId { get; set; }

        /// <summary>
        /// Last name / family name.  For individuals only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId2")]
        public int? PriceListId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId3")]
        public int? PriceListId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxOfficeId")]
        public int? TaxOfficeId { get; set; }

        /// <summary>
        /// A title (Mr / Mrs / Miss) etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleId")]
        public int? TitleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalIDResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("integrationName")]
        public string IntegrationName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndividualCustomerResponse
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// Date of birth (yyyy-mm-dd)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// National ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// Name with customer type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayedName")]
        public string DisplayedName { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        /// <summary>
        /// Used to indicate that this person is a contact person / an employee in a particular company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("employerId")]
        public int? EmployerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// First name / given name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// First name and Last name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Individual's job title Ids.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobTitleId")]
        public int? JobTitleId { get; set; }

        /// <summary>
        /// Last name / family name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId2")]
        public int? PriceListId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId3")]
        public int? PriceListId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxOfficeId")]
        public int? TaxOfficeId { get; set; }

        /// <summary>
        /// A title (Mr / Mrs / Miss) etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleId")]
        public int? TitleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTitleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTitleResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagGroupResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TitleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TitleResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCompanyRequest
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// Registry code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId")]
        public int? PricelistId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId2")]
        public int? PricelistId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId3")]
        public int? PricelistId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxofficeId")]
        public int? TaxofficeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCustomerGroupRequest
    {
        /// <summary>
        /// Check box “This customer group does not earn new reward points”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("doNotCollectRewardPoints")]
        public bool? DoNotCollectRewardPoints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public int? ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList2ID")]
        public int? PriceList2ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList3ID")]
        public int? PriceList3ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList4ID")]
        public int? PriceList4ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceList5ID")]
        public int? PriceList5ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateIndividualRequest
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// Date of birth (yyyy-mm-dd)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// National ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        /// <summary>
        /// Used to indicate that this person is a contact person / an employee in a particular company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("employerId")]
        public int? EmployerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// First name / given name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Individual's job title Ids.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobTitleId")]
        public int? JobTitleId { get; set; }

        /// <summary>
        /// Last name / family name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId2")]
        public int? PriceListId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId3")]
        public int? PriceListId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxOfficeId")]
        public int? TaxOfficeId { get; set; }

        /// <summary>
        /// A title (Mr / Mrs / Miss) etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleId")]
        public int? TitleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCompanyRequest2
    {

        [System.Text.Json.Serialization.JsonPropertyName("requests")]
        public System.Collections.Generic.ICollection<CreateCompanyRequest> Requests { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateIndividualRequest2
    {

        [System.Text.Json.Serialization.JsonPropertyName("requests")]
        public System.Collections.Generic.ICollection<CreateIndividualRequest> Requests { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseWithResults
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<Result> Results { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// identifier of the REST-ful response
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resourceID")]
        public int? ResourceID { get; set; }

        /// <summary>
        /// identifier of the result item
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resultID")]
        public int? ResultID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCompanyRequest2
    {
        /// <summary>
        /// products must contain IDs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requests")]
        public System.Collections.Generic.ICollection<UpdateCompanyRequestItem> Requests { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCompanyRequestItem
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// Registry code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preserveOldCardNumber")]
        public bool? PreserveOldCardNumber { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId")]
        public int? PricelistId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId2")]
        public int? PricelistId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricelistId3")]
        public int? PricelistId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The resourceId request field should be used for the product id in each request for the bulk update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resourceID")]
        public int? ResourceID { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxofficeId")]
        public int? TaxofficeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateIndividualRequest2
    {
        /// <summary>
        /// products must contain IDs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requests")]
        public System.Collections.Generic.ICollection<UpdateIndividualRequestItem> Requests { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateIndividualRequestItem
    {
        /// <summary>
        /// Global Location Number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GLN")]
        public string GLN { get; set; }

        /// <summary>
        /// Number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// IBAN number of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankIban")]
        public string BankIban { get; set; }

        /// <summary>
        /// Name of customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string BankName { get; set; }

        /// <summary>
        /// BIC/SWIFT identifier of customer's bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankSwiftCode")]
        public string BankSwiftCode { get; set; }

        /// <summary>
        /// Date of birth (yyyy-mm-dd)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// area of business.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessAreaId")]
        public int? BusinessAreaId { get; set; }

        /// <summary>
        /// National ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Color that the customer entry is marked with. Possible values: "", "yellow", "red", "blue", "green".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Customer’s country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Customer’s credit limit: the maximum amount of money (in account default currency) that they are allowed to owe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        /// <summary>
        /// Flag indicating that Erply does not keep track of the customer's balance (amount prepaid or due)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerBalanceDisabled")]
        public bool? CustomerBalanceDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupId")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Customer manager (must be an employee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerManagerId")]
        public int? CustomerManagerId { get; set; }

        /// <summary>
        /// Default payment deadline (in days).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultPaymentDeadLine")]
        public int? DefaultPaymentDeadLine { get; set; }

        /// <summary>
        /// A field that propagates from customer records to sales documents and lets the company categorize shipments by delivery method or delivery time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryTypeId")]
        public int? DeliveryTypeId { get; set; }

        /// <summary>
        /// In UI, the field is titled “E-invoice email address”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceEmail")]
        public string EInvoiceEmail { get; set; }

        /// <summary>
        /// E-invoice related field. Titled “Customer’s reference”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoiceReference")]
        public string EInvoiceReference { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via electronic channels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eInvoicesViaEmailEnabled")]
        public bool? EInvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediCode")]
        public string EdiCode { get; set; }

        /// <summary>
        /// This is a classifier that specifies which EDI protocol this customer prefers. The database field can have four possible integer values (0, 1, 2, 3), and the API should expose them as keywords (similarly to product statuses and product types):
        /// <br/>0 - empty / not defined
        /// <br/>1 - keyword 2DOC
        /// <br/>2 - keyword 4DOC
        /// <br/>3 - keyword SPECIAL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ediType")]
        public string EdiType { get; set; }

        /// <summary>
        /// Flag indicating that this customer does not want to receive email correspondence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailOptOut")]
        public bool? EmailOptOut { get; set; }

        /// <summary>
        /// Used to indicate that this person is a contact person / an employee in a particular company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("employerId")]
        public int? EmployerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("facebookName")]
        public string FacebookName { get; set; }

        /// <summary>
        /// Factoring contract number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]
        public string FactoringContractNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fax")]
        public string Fax { get; set; }

        /// <summary>
        /// First name / given name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gender. Erply API only accepts "male" "female" or an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Location where the customer shops most frequently.  https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreId")]
        public int? HomeStoreId { get; set; }

        /// <summary>
        /// Corresponding customer identifier in a system integrated with Erply (eg. accounting software)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("integrationCode")]
        public string IntegrationCode { get; set; }

        /// <summary>
        /// yes/no flag that complements channel_email and channel_einvoice. Out of these three, the user can select which data exchange channel(s) this customer prefers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaDocuraEnabled")]
        public bool? InvoicesViaDocuraEnabled { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants to receive invoices via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoicesViaEmailEnabled")]
        public bool? InvoicesViaEmailEnabled { get; set; }

        /// <summary>
        /// Mark if a customer should be starred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isStarred")]
        public bool? IsStarred { get; set; }

        /// <summary>
        /// Individual's job title Ids.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jobTitleId")]
        public int? JobTitleId { get; set; }

        /// <summary>
        /// Last name / family name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Assign the code of customer's loyalty/membership card. This code must match the sequence produced by card swipe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loyaltyCardNumber")]
        public string LoyaltyCardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        /// <summary>
        /// E-invoice integration parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operatorId")]
        public string OperatorId { get; set; }

        /// <summary>
        /// 0 or 1: whether the customer wants the e-invoice operator to deliver paper mails (if such option is supported).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperMailsEnabled")]
        public bool? PaperMailsEnabled { get; set; }

        /// <summary>
        /// “Payer of invoices” (another customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerId")]
        public int? PayerId { get; set; }

        /// <summary>
        /// Flag indicating that this customer pays via factoring (all invoices must be addressed to a designated third party)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paysViaFactoring")]
        public bool? PaysViaFactoring { get; set; }

        /// <summary>
        /// Late fee / penalty for overdue invoices.
        /// <br/>The semantic meaning of this value is not strictly defined; usually we expect it to be “% per day”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("penaltyForOverdue")]
        public double? PenaltyForOverdue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Flag indicating that coupons must not be automatically printed to this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("posCouponsDisabled")]
        public bool? PosCouponsDisabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preserveOldCardNumber")]
        public bool? PreserveOldCardNumber { get; set; }

        /// <summary>
        /// Assign the customer a price list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("priceListId")]
        public int? PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId2")]
        public int? PriceListId2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceListId3")]
        public int? PriceListId3 { get; set; }

        /// <summary>
        /// Customer’s reference number for sales invoices.
        /// <br/>	Assign a reference number - if system is configured to use hand-created customer reference numbers.
        /// <br/>	By default not necessary, since reference numbers are created automatically.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The resourceId request field should be used for the product id in each request for the bulk update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resourceID")]
        public int? ResourceID { get; set; }

        /// <summary>
        /// Flag indicating that the customer will not earn points for purchases. (They can still spend existing points though.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rewardPointsDisabled")]
        public bool? RewardPointsDisabled { get; set; }

        /// <summary>
        /// A flag titled “Do not sell to this customer”
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDisabled")]
        public bool? SalesDisabled { get; set; }

        /// <summary>
        /// Flag “Sales for cash only”. By default false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesForCashOnly")]
        public bool? SalesForCashOnly { get; set; }

        /// <summary>
        /// A flag indicating that this customer wants to get goods with Waybills, not Invoice-Waybills.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipGoodsWithWaybills")]
        public bool? ShipGoodsWithWaybills { get; set; }

        /// <summary>
        /// Location where the customer signed up. https://learn-api.erply.com/requests/getwarehouses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signUpStoreId")]
        public int? SignUpStoreId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("skype")]
        public string Skype { get; set; }

        /// <summary>
        /// Flag indicating that this customer must not be charged sales tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxExempt")]
        public bool? TaxExempt { get; set; }

        /// <summary>
        /// Feature used by Greek customers: office where the customer / supplier reports to. (This value must be shown on some printouts.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxOfficeId")]
        public int? TaxOfficeId { get; set; }

        /// <summary>
        /// A title (Mr / Mrs / Miss) etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("titleId")]
        public int? TitleId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// Customer type. Possible values are "DOMESTIC", "EU", "OUTSIDE_EU".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Customer's VAT number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]
        public string VatNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopPassword")]
        public string WebShopPassword { get; set; }

        /// <summary>
        /// This is for web shop integrations: to store customers' web-shop login credentials in Erply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webShopUsername")]
        public string WebShopUsername { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string Website { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Translatable
    {

        [System.Text.Json.Serialization.JsonPropertyName("ar")]
        public string Ar { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cs")]
        public string Cs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("da")]
        public string Da { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("de")]
        public string De { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("el")]
        public string El { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("en")]
        public string En { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("es")]
        public string Es { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("et")]
        public string Et { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fi")]
        public string Fi { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fo")]
        public string Fo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fr")]
        public string Fr { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("it")]
        public string It { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lt")]
        public string Lt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lv")]
        public string Lv { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nl")]
        public string Nl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("no")]
        public string No { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pl")]
        public string Pl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ru")]
        public string Ru { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sv")]
        public string Sv { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("th")]
        public string Th { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tr")]
        public string Tr { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vi")]
        public string Vi { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zh_Hans")]
        public string Zh_Hans { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zh_Hant")]
        public string Zh_Hant { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result2
    {
        /// <summary>
        /// ID of the element
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name is the name in the client's default language. Will be prefixed n times if the element is a child of another element.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfflineDbCustomer
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("countryID")]
        public int? CountryID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public int? CreditLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerGroupID")]
        public int? CustomerGroupID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("homeStoreID")]
        public int? HomeStoreID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mail")]
        public string Mail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string Mobile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributeRequest
    {
        /// <summary>
        /// Entity name of the record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        public string Entity { get; set; }

        /// <summary>
        /// ID of the attribute
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// name of the attribute
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ID of the record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("record_id")]
        public int? Record_id { get; set; }

        /// <summary>
        /// 3 types are available - int, double, text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// based on the type value should be number of text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributeResponse
    {
        /// <summary>
        /// Entity name of the record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        public string Entity { get; set; }

        /// <summary>
        /// ID of the attribute
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ID of the database record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("record_id")]
        public int? Record_id { get; set; }

        /// <summary>
        /// 3 types are available - int, double, text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// based on the type value can be number of text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAddressRequest
    {
        /// <summary>
        /// Street address, line 2. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// City, region, or county
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Postal code or ZIP code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// State. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// Street address.
        /// <br/>If address cannot be split into parts, put the whole address into this field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOldCardNumberRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerAddressResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedBy")]
        public string AddedBy { get; set; }

        /// <summary>
        /// Street address, line 2. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedBy")]
        public string ChangedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Postal code or ZIP code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// State. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// Street address.
        /// <br/>If address cannot be split into parts, put the whole address into this field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalIDRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("integrationName")]
        public string IntegrationName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoveRequest
    {
        /// <summary>
        /// Position has to be  lastChild | before | after
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string Position { get; set; }

        /// <summary>
        /// Target Group ID represents the group that the requested group is put after, or before, or becomes the last child of
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetId")]
        public int? TargetId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OldCardNumberResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagToCustomerLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public int? TagId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagToCustomerLinkResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public int? TagId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagToGroupLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public int? GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public int? TagId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagToGroupLinkResponse
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public int? GroupId { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public int? TagId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAddressRequest
    {
        /// <summary>
        /// Street address, line 2. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string Address2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Postal code or ZIP code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// State. This field is exposed via Erply user interface only for US, CA and MX accounts!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// Street address.
        /// <br/>If address cannot be split into parts, put the whole address into this field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public int? TypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateOldCardNumberRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("ids")]
        public System.Collections.Generic.ICollection<int> Ids { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmptyResponse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Customer type. Possible values are 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EU")]
        EU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTSIDE_EU")]
        OUTSIDE_EU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EU_WITH_VAT")]
        EU_WITH_VAT = 3,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Search by the customer type. Possible values are 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EU")]
        EU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTSIDE_EU")]
        OUTSIDE_EU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EU_WITH_VAT")]
        EU_WITH_VAT = 3,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Search by the customer type. Possible values are 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EU")]
        EU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTSIDE_EU")]
        OUTSIDE_EU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EU_WITH_VAT")]
        EU_WITH_VAT = 3,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603