//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ErplyAPI.New.Sales
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Actual_ReportsClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Actual_ReportsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Templates
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActualReportsTemplate>> TemplatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/actual-reports/templates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ActualReportsTemplate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sales_DocumentsClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Sales_DocumentsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales documents
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by IDs</param>
        /// <param name="typeIDs">Search by type IDs (except type_id = 9 (sales orders) and type_id = 5 (quotes))</param>
        /// <param name="currencyIDs">Search by currency IDs</param>
        /// <param name="customerIDs">Search by customer IDs</param>
        /// <param name="addressIDs">Search by address IDs</param>
        /// <param name="payerIDs">Search by payer IDs</param>
        /// <param name="payerAddressIDs">Search by payer address IDs</param>
        /// <param name="customerContactIDs">Search by customer contact IDs</param>
        /// <param name="shipToContactIDs">Search by shipTo contact IDs</param>
        /// <param name="warehouseIDs">Search by warehouse IDs</param>
        /// <param name="posIDs">Search by POS IDs</param>
        /// <param name="invoiceCreatorIDs">Search by invoice creator IDs</param>
        /// <param name="projectIDs">Search by project IDs</param>
        /// <param name="paymentTypeIDs">Search by payment type IDs</param>
        /// <param name="state">Search by state. DEPRECATED, please use the states filter</param>
        /// <param name="states">Search by state</param>
        /// <param name="paymentState">Search by payment state.</param>
        /// <param name="creditToIDs">Search by creditTo IDs</param>
        /// <param name="invoiceNumber">Search by invoice numbers</param>
        /// <param name="invoiceNumberSuffix">Search by invoice number suffix</param>
        /// <param name="orderTrackingNumber">Search by order tracking number</param>
        /// <param name="orderFulfillmentStatus">Search by order fulfillment status</param>
        /// <param name="invoiceDateFrom">Search by invoice date from, yyyy-mm-dd</param>
        /// <param name="invoiceDateTo">Search by invoice date to, yyyy-mm-dd</param>
        /// <param name="invoiceTime">Search by invoice time</param>
        /// <param name="dueDays">Search by due date</param>
        /// <param name="doNotPrintDeadline">Search by doNotPrintDeadline flag</param>
        /// <param name="prepaymentAmount">Search by prepayment amount</param>
        /// <param name="prepaymentPercent">Search by prepayment percent</param>
        /// <param name="isConfirmed">Search by isConfirmed flag</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="internalNotes">Search by internal notes</param>
        /// <param name="currencyRate">Search by currency rate</param>
        /// <param name="netTotal">Search by net total</param>
        /// <param name="taxTotal">Search by tax total</param>
        /// <param name="rounding">Search by rounding</param>
        /// <param name="total">Search by total</param>
        /// <param name="hideDiscountOnPrintout">Search by hideDiscountOnPrintout flag</param>
        /// <param name="hidePricesOnPrintout">Search by hidePricesOnPrintout flag</param>
        /// <param name="hideQuantitiesOnPrintout">Search by hideQuantitiesOnPrintout flag</param>
        /// <param name="hideInvoiceTotalOnPrintout">Search by hideInvoiceTotalOnPrintout flag</param>
        /// <param name="invoiceCustomNumber">Search by invoice custom number</param>
        /// <param name="type">Search by type (DOMESTIC, EU, OUTSIDE_EU, EU_WITH_VAT)</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDocument>> DocumentsAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> typeIDs = null, System.Collections.Generic.IEnumerable<int> currencyIDs = null, System.Collections.Generic.IEnumerable<int> customerIDs = null, System.Collections.Generic.IEnumerable<int> addressIDs = null, System.Collections.Generic.IEnumerable<int> payerIDs = null, System.Collections.Generic.IEnumerable<int> payerAddressIDs = null, System.Collections.Generic.IEnumerable<int> customerContactIDs = null, System.Collections.Generic.IEnumerable<int> shipToContactIDs = null, System.Collections.Generic.IEnumerable<int> warehouseIDs = null, System.Collections.Generic.IEnumerable<int> posIDs = null, System.Collections.Generic.IEnumerable<int> invoiceCreatorIDs = null, System.Collections.Generic.IEnumerable<int> projectIDs = null, System.Collections.Generic.IEnumerable<int> paymentTypeIDs = null, State? state = null, System.Collections.Generic.IEnumerable<Anonymous> states = null, PaymentState? paymentState = null, System.Collections.Generic.IEnumerable<int> creditToIDs = null, int? invoiceNumber = null, string invoiceNumberSuffix = null, string orderTrackingNumber = null, string orderFulfillmentStatus = null, string invoiceDateFrom = null, string invoiceDateTo = null, string invoiceTime = null, int? dueDays = null, bool? doNotPrintDeadline = null, double? prepaymentAmount = null, int? prepaymentPercent = null, bool? isConfirmed = null, string notes = null, System.Collections.Generic.IEnumerable<int> internalNotes = null, double? currencyRate = null, double? netTotal = null, double? taxTotal = null, double? rounding = null, double? total = null, bool? hideDiscountOnPrintout = null, bool? hidePricesOnPrintout = null, bool? hideQuantitiesOnPrintout = null, bool? hideInvoiceTotalOnPrintout = null, string invoiceCustomNumber = null, string type = null, OrderBy? orderBy = null, OrderByDirection? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(String.Join(",",ids)).Append("&");
            }
            if (typeIDs != null)
            {
                foreach (var item_ in typeIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("typeIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyIDs != null)
            {
                foreach (var item_ in currencyIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("currencyIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIDs != null)
            {
                foreach (var item_ in customerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (addressIDs != null)
            {
                foreach (var item_ in addressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("addressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerIDs != null)
            {
                foreach (var item_ in payerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerAddressIDs != null)
            {
                foreach (var item_ in payerAddressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerAddressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerContactIDs != null)
            {
                foreach (var item_ in customerContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (shipToContactIDs != null)
            {
                foreach (var item_ in shipToContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("shipToContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (warehouseIDs != null)
            {
                foreach (var item_ in warehouseIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("warehouseIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (posIDs != null)
            {
                foreach (var item_ in posIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("posIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceCreatorIDs != null)
            {
                foreach (var item_ in invoiceCreatorIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCreatorIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (projectIDs != null)
            {
                foreach (var item_ in projectIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("projectIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentTypeIDs != null)
            {
                foreach (var item_ in paymentTypeIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentTypeIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (states != null)
            {
                foreach (var item_ in states) { urlBuilder_.Append(System.Uri.EscapeDataString("states") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditToIDs != null)
            {
                foreach (var item_ in creditToIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("creditToIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceNumberSuffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumberSuffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumberSuffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderTrackingNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderTrackingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderTrackingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderFulfillmentStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderFulfillmentStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderFulfillmentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dueDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (doNotPrintDeadline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("doNotPrintDeadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(doNotPrintDeadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentPercent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentPercent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentPercent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (internalNotes != null)
            {
                foreach (var item_ in internalNotes) { urlBuilder_.Append(System.Uri.EscapeDataString("internalNotes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyRate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyRate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (netTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("netTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(netTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taxTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taxTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taxTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rounding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rounding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rounding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideDiscountOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideDiscountOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideDiscountOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hidePricesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hidePricesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hidePricesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideQuantitiesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideQuantitiesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideQuantitiesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideInvoiceTotalOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideInvoiceTotalOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideInvoiceTotalOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceCustomNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCustomNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceCustomNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleDocument>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send sales documents by e-mail
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SendResult>> ByEmailAsync(Requests request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/by-email");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SendResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sent sales documents by e-mail
        /// </summary>
        /// <param name="messageIDs">by-email message IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageStatuses> StatusAsync(System.Collections.Generic.IEnumerable<int> messageIDs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (messageIDs == null)
                throw new System.ArgumentNullException("messageIDs");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/by-email/status?");
            foreach (var item_ in messageIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("messageIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageStatuses>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales orders
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by IDs</param>
        /// <param name="currencyIDs">Search by currency IDs</param>
        /// <param name="customerIDs">Search by customer IDs</param>
        /// <param name="addressIDs">Search by address IDs</param>
        /// <param name="payerIDs">Search by payer IDs</param>
        /// <param name="payerAddressIDs">Search by payer address IDs</param>
        /// <param name="customerContactIDs">Search by customer contact IDs</param>
        /// <param name="shipToContactIDs">Search by shipTo contact IDs</param>
        /// <param name="warehouseIDs">Search by warehouse IDs</param>
        /// <param name="posIDs">Search by POS IDs</param>
        /// <param name="invoiceCreatorIDs">Search by invoice creator IDs</param>
        /// <param name="projectIDs">Search by project IDs</param>
        /// <param name="paymentTypeIDs">Search by payment type IDs</param>
        /// <param name="state">Search by state. DEPRECATED, please use the states filter</param>
        /// <param name="states">Search by state</param>
        /// <param name="paymentState">Search by payment state.</param>
        /// <param name="creditToIDs">Search by creditTo IDs</param>
        /// <param name="invoiceNumber">Search by invoice numbers</param>
        /// <param name="invoiceNumberSuffix">Search by invoice number suffix</param>
        /// <param name="orderTrackingNumber">Search by order tracking number</param>
        /// <param name="orderFulfillmentStatus">Search by order fulfillment status</param>
        /// <param name="invoiceDateFrom">Search by invoice date from, yyyy-mm-dd</param>
        /// <param name="invoiceDateTo">Search by invoice date to, yyyy-mm-dd</param>
        /// <param name="invoiceTime">Search by invoice time</param>
        /// <param name="dueDays">Search by due date</param>
        /// <param name="doNotPrintDeadline">Search by doNotPrintDeadline flag</param>
        /// <param name="prepaymentAmount">Search by prepayment amount</param>
        /// <param name="prepaymentPercent">Search by prepayment percent</param>
        /// <param name="isConfirmed">Search by isConfirmed flag</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="internalNotes">Search by internal notes</param>
        /// <param name="currencyRate">Search by currency rate</param>
        /// <param name="netTotal">Search by net total</param>
        /// <param name="taxTotal">Search by tax total</param>
        /// <param name="rounding">Search by rounding</param>
        /// <param name="total">Search by total</param>
        /// <param name="hideDiscountOnPrintout">Search by hideDiscountOnPrintout flag</param>
        /// <param name="hidePricesOnPrintout">Search by hidePricesOnPrintout flag</param>
        /// <param name="hideQuantitiesOnPrintout">Search by hideQuantitiesOnPrintout flag</param>
        /// <param name="hideInvoiceTotalOnPrintout">Search by hideInvoiceTotalOnPrintout flag</param>
        /// <param name="invoiceCustomNumber">Search by invoice custom number</param>
        /// <param name="type">Search by type (DOMESTIC, EU, OUTSIDE_EU, EU_WITH_VAT)</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDocument>> OrdersAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> currencyIDs = null, System.Collections.Generic.IEnumerable<int> customerIDs = null, System.Collections.Generic.IEnumerable<int> addressIDs = null, System.Collections.Generic.IEnumerable<int> payerIDs = null, System.Collections.Generic.IEnumerable<int> payerAddressIDs = null, System.Collections.Generic.IEnumerable<int> customerContactIDs = null, System.Collections.Generic.IEnumerable<int> shipToContactIDs = null, System.Collections.Generic.IEnumerable<int> warehouseIDs = null, System.Collections.Generic.IEnumerable<int> posIDs = null, System.Collections.Generic.IEnumerable<int> invoiceCreatorIDs = null, System.Collections.Generic.IEnumerable<int> projectIDs = null, System.Collections.Generic.IEnumerable<int> paymentTypeIDs = null, State2? state = null, System.Collections.Generic.IEnumerable<Anonymous2> states = null, PaymentState2? paymentState = null, System.Collections.Generic.IEnumerable<int> creditToIDs = null, int? invoiceNumber = null, string invoiceNumberSuffix = null, string orderTrackingNumber = null, string orderFulfillmentStatus = null, string invoiceDateFrom = null, string invoiceDateTo = null, string invoiceTime = null, int? dueDays = null, bool? doNotPrintDeadline = null, double? prepaymentAmount = null, int? prepaymentPercent = null, bool? isConfirmed = null, string notes = null, System.Collections.Generic.IEnumerable<int> internalNotes = null, double? currencyRate = null, double? netTotal = null, double? taxTotal = null, double? rounding = null, double? total = null, bool? hideDiscountOnPrintout = null, bool? hidePricesOnPrintout = null, bool? hideQuantitiesOnPrintout = null, bool? hideInvoiceTotalOnPrintout = null, string invoiceCustomNumber = null, string type = null, OrderBy2? orderBy = null, OrderByDirection2? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/orders?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyIDs != null)
            {
                foreach (var item_ in currencyIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("currencyIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIDs != null)
            {
                foreach (var item_ in customerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (addressIDs != null)
            {
                foreach (var item_ in addressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("addressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerIDs != null)
            {
                foreach (var item_ in payerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerAddressIDs != null)
            {
                foreach (var item_ in payerAddressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerAddressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerContactIDs != null)
            {
                foreach (var item_ in customerContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (shipToContactIDs != null)
            {
                foreach (var item_ in shipToContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("shipToContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (warehouseIDs != null)
            {
                foreach (var item_ in warehouseIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("warehouseIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (posIDs != null)
            {
                foreach (var item_ in posIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("posIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceCreatorIDs != null)
            {
                foreach (var item_ in invoiceCreatorIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCreatorIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (projectIDs != null)
            {
                foreach (var item_ in projectIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("projectIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentTypeIDs != null)
            {
                foreach (var item_ in paymentTypeIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentTypeIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (states != null)
            {
                foreach (var item_ in states) { urlBuilder_.Append(System.Uri.EscapeDataString("states") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditToIDs != null)
            {
                foreach (var item_ in creditToIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("creditToIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceNumberSuffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumberSuffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumberSuffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderTrackingNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderTrackingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderTrackingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderFulfillmentStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderFulfillmentStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderFulfillmentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dueDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (doNotPrintDeadline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("doNotPrintDeadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(doNotPrintDeadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentPercent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentPercent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentPercent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (internalNotes != null)
            {
                foreach (var item_ in internalNotes) { urlBuilder_.Append(System.Uri.EscapeDataString("internalNotes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyRate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyRate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (netTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("netTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(netTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taxTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taxTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taxTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rounding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rounding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rounding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideDiscountOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideDiscountOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideDiscountOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hidePricesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hidePricesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hidePricesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideQuantitiesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideQuantitiesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideQuantitiesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideInvoiceTotalOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideInvoiceTotalOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideInvoiceTotalOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceCustomNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCustomNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceCustomNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleDocument>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get quotes
        /// </summary>
        /// <param name="match">match type of the filtering. Supported values: `=`, `&gt;=`, `&lt;=`, `contains`, `startswith`. Default is `=`</param>
        /// <param name="ids">Search by IDs</param>
        /// <param name="currencyIDs">Search by currency IDs</param>
        /// <param name="customerIDs">Search by customer IDs</param>
        /// <param name="addressIDs">Search by address IDs</param>
        /// <param name="payerIDs">Search by payer IDs</param>
        /// <param name="payerAddressIDs">Search by payer address IDs</param>
        /// <param name="customerContactIDs">Search by customer contact IDs</param>
        /// <param name="shipToContactIDs">Search by shipTo contact IDs</param>
        /// <param name="warehouseIDs">Search by warehouse IDs</param>
        /// <param name="posIDs">Search by POS IDs</param>
        /// <param name="invoiceCreatorIDs">Search by invoice creator IDs</param>
        /// <param name="projectIDs">Search by project IDs</param>
        /// <param name="paymentTypeIDs">Search by payment type IDs</param>
        /// <param name="state">Search by state. DEPRECATED, please use the states filter</param>
        /// <param name="states">Search by state</param>
        /// <param name="paymentState">Search by payment state.</param>
        /// <param name="creditToIDs">Search by creditTo IDs</param>
        /// <param name="invoiceNumber">Search by invoice numbers</param>
        /// <param name="invoiceNumberSuffix">Search by invoice number suffix</param>
        /// <param name="orderTrackingNumber">Search by order tracking number</param>
        /// <param name="orderFulfillmentStatus">Search by order fulfillment status</param>
        /// <param name="invoiceDateFrom">Search by invoice date from, yyyy-mm-dd</param>
        /// <param name="invoiceDateTo">Search by invoice date to, yyyy-mm-dd</param>
        /// <param name="invoiceTime">Search by invoice time</param>
        /// <param name="dueDays">Search by due date</param>
        /// <param name="doNotPrintDeadline">Search by doNotPrintDeadline flag</param>
        /// <param name="prepaymentAmount">Search by prepayment amount</param>
        /// <param name="prepaymentPercent">Search by prepayment percent</param>
        /// <param name="isConfirmed">Search by isConfirmed flag</param>
        /// <param name="notes">Search by notes</param>
        /// <param name="internalNotes">Search by internal notes</param>
        /// <param name="currencyRate">Search by currency rate</param>
        /// <param name="netTotal">Search by net total</param>
        /// <param name="taxTotal">Search by tax total</param>
        /// <param name="rounding">Search by rounding</param>
        /// <param name="total">Search by total</param>
        /// <param name="hideDiscountOnPrintout">Search by hideDiscountOnPrintout flag</param>
        /// <param name="hidePricesOnPrintout">Search by hidePricesOnPrintout flag</param>
        /// <param name="hideQuantitiesOnPrintout">Search by hideQuantitiesOnPrintout flag</param>
        /// <param name="hideInvoiceTotalOnPrintout">Search by hideInvoiceTotalOnPrintout flag</param>
        /// <param name="invoiceCustomNumber">Search by invoice custom number</param>
        /// <param name="type">Search by type (DOMESTIC, EU, OUTSIDE_EU, EU_WITH_VAT)</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <param name="withTotalCount">optionally return total number of records in the X-Total-Count response header</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDocument>> QuotesAsync(string match = null, System.Collections.Generic.IEnumerable<int> ids = null, System.Collections.Generic.IEnumerable<int> currencyIDs = null, System.Collections.Generic.IEnumerable<int> customerIDs = null, System.Collections.Generic.IEnumerable<int> addressIDs = null, System.Collections.Generic.IEnumerable<int> payerIDs = null, System.Collections.Generic.IEnumerable<int> payerAddressIDs = null, System.Collections.Generic.IEnumerable<int> customerContactIDs = null, System.Collections.Generic.IEnumerable<int> shipToContactIDs = null, System.Collections.Generic.IEnumerable<int> warehouseIDs = null, System.Collections.Generic.IEnumerable<int> posIDs = null, System.Collections.Generic.IEnumerable<int> invoiceCreatorIDs = null, System.Collections.Generic.IEnumerable<int> projectIDs = null, System.Collections.Generic.IEnumerable<int> paymentTypeIDs = null, State3? state = null, System.Collections.Generic.IEnumerable<Anonymous3> states = null, PaymentState3? paymentState = null, System.Collections.Generic.IEnumerable<int> creditToIDs = null, int? invoiceNumber = null, string invoiceNumberSuffix = null, string orderTrackingNumber = null, string orderFulfillmentStatus = null, string invoiceDateFrom = null, string invoiceDateTo = null, string invoiceTime = null, int? dueDays = null, bool? doNotPrintDeadline = null, double? prepaymentAmount = null, int? prepaymentPercent = null, bool? isConfirmed = null, string notes = null, System.Collections.Generic.IEnumerable<int> internalNotes = null, double? currencyRate = null, double? netTotal = null, double? taxTotal = null, double? rounding = null, double? total = null, bool? hideDiscountOnPrintout = null, bool? hidePricesOnPrintout = null, bool? hideQuantitiesOnPrintout = null, bool? hideInvoiceTotalOnPrintout = null, string invoiceCustomNumber = null, string type = null, OrderBy3? orderBy = null, OrderByDirection3? orderByDirection = null, int? skip = null, int? take = null, bool? withTotalCount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/quotes?");
            if (match != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("match") + "=").Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyIDs != null)
            {
                foreach (var item_ in currencyIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("currencyIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerIDs != null)
            {
                foreach (var item_ in customerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (addressIDs != null)
            {
                foreach (var item_ in addressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("addressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerIDs != null)
            {
                foreach (var item_ in payerIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (payerAddressIDs != null)
            {
                foreach (var item_ in payerAddressIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("payerAddressIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customerContactIDs != null)
            {
                foreach (var item_ in customerContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("customerContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (shipToContactIDs != null)
            {
                foreach (var item_ in shipToContactIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("shipToContactIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (warehouseIDs != null)
            {
                foreach (var item_ in warehouseIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("warehouseIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (posIDs != null)
            {
                foreach (var item_ in posIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("posIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceCreatorIDs != null)
            {
                foreach (var item_ in invoiceCreatorIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCreatorIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (projectIDs != null)
            {
                foreach (var item_ in projectIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("projectIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentTypeIDs != null)
            {
                foreach (var item_ in paymentTypeIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentTypeIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (states != null)
            {
                foreach (var item_ in states) { urlBuilder_.Append(System.Uri.EscapeDataString("states") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditToIDs != null)
            {
                foreach (var item_ in creditToIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("creditToIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (invoiceNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceNumberSuffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumberSuffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumberSuffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderTrackingNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderTrackingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderTrackingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderFulfillmentStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderFulfillmentStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderFulfillmentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceDateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDateTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceDateTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dueDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (doNotPrintDeadline != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("doNotPrintDeadline") + "=").Append(System.Uri.EscapeDataString(ConvertToString(doNotPrintDeadline, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prepaymentPercent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentPercent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prepaymentPercent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isConfirmed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isConfirmed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isConfirmed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (internalNotes != null)
            {
                foreach (var item_ in internalNotes) { urlBuilder_.Append(System.Uri.EscapeDataString("internalNotes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (currencyRate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyRate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (netTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("netTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(netTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taxTotal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taxTotal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taxTotal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rounding != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rounding") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rounding, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (total != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("total") + "=").Append(System.Uri.EscapeDataString(ConvertToString(total, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideDiscountOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideDiscountOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideDiscountOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hidePricesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hidePricesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hidePricesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideQuantitiesOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideQuantitiesOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideQuantitiesOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hideInvoiceTotalOnPrintout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hideInvoiceTotalOnPrintout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hideInvoiceTotalOnPrintout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invoiceCustomNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceCustomNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceCustomNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withTotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withTotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withTotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleDocument>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read sales document rows
        /// </summary>
        /// <param name="documentID">sales document ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowResponse>> RowsAsync(int documentID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (documentID == null)
                throw new System.ArgumentNullException("documentID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/{documentID}/rows");
            urlBuilder_.Replace("{documentID}", System.Uri.EscapeDataString(ConvertToString(documentID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RowResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read  non-returned items from a sales document
        /// </summary>
        /// <param name="originalDocumentID">ID of the document that was credited</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NonInvoicedRowResponse>> NonReturnedAsync(int originalDocumentID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (originalDocumentID == null)
                throw new System.ArgumentNullException("originalDocumentID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/{originalDocumentID}/rows/non-returned");
            urlBuilder_.Replace("{originalDocumentID}", System.Uri.EscapeDataString(ConvertToString(originalDocumentID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NonInvoicedRowResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read sales document non-invoiced rows
        /// </summary>
        /// <param name="sourceDocumentIDs">semicolon separated source sales documents ID. A user might fulfill orders partially (one order -&gt; multiple invoices) or in bulk (multiple orders -&gt; one invoice). That is why the input accepts multiple IDs.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NonInvoicedRowResponse>> NonInvoicedAsync(string sourceDocumentIDs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sourceDocumentIDs == null)
                throw new System.ArgumentNullException("sourceDocumentIDs");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/{sourceDocumentIDs}/rows/non-invoiced");
            urlBuilder_.Replace("{sourceDocumentIDs}", System.Uri.EscapeDataString(ConvertToString(sourceDocumentIDs, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NonInvoicedRowResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download PDF of sales documents
        /// </summary>
        /// <param name="documentID">Sales Document ID</param>
        /// <param name="language">document language, 3 letter ERPLY legacy language code. Default is 'eng'</param>
        /// <param name="templateId">custom printout template ID, use List Templates endpoint to get the ID</param>
        /// <param name="filename">generated PDF filename for the sales document ID without '.pdf' extension. Default is 'sales-document'</param>
        /// <param name="paperSize">paper size, can be A4 or Letter, default is A4</param>
        /// <returns>binary file content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PdfAsync(int documentID, string language = null, int? templateId = null, string filename = null, PaperSize? paperSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (documentID == null)
                throw new System.ArgumentNullException("documentID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/{documentID}/pdf?");
            urlBuilder_.Replace("{documentID}", System.Uri.EscapeDataString(ConvertToString(documentID, System.Globalization.CultureInfo.InvariantCulture)));
            if (language != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (templateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("templateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filename != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filename") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paperSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paperSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paperSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a permanent sales document url
        /// </summary>
        /// <param name="documentID">Sales Document ID</param>
        /// <param name="templateID">custom printout template ID, use List Templates endpoint to get the ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UrlResponse> PermanentPdfUrlAsync(int documentID, int? templateID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (documentID == null)
                throw new System.ArgumentNullException("documentID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/{documentID}/permanent-pdf-url?");
            urlBuilder_.Replace("{documentID}", System.Uri.EscapeDataString(ConvertToString(documentID, System.Globalization.CultureInfo.InvariantCulture)));
            if (templateID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("templateID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(templateID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UrlResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a sales document from pregenerated URL
        /// </summary>
        /// <param name="checksum">checkSum</param>
        /// <param name="templateId">custom printout template ID, use List Templates endpoint to get the ID</param>
        /// <returns>binary file content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PermanentPdfAsync(string checksum, int? templateId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (checksum == null)
                throw new System.ArgumentNullException("checksum");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/{documentID}/{clientCode}/{checkSum}/permanent-pdf?");
            urlBuilder_.Replace("{checksum}", System.Uri.EscapeDataString(ConvertToString(checksum, System.Globalization.CultureInfo.InvariantCulture)));
            if (templateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("templateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sales_Document_ClassifiersClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Sales_Document_ClassifiersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read incoterms
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Incoterm>> IncotermsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/incoterms");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Incoterm>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read sales document transaction types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransactionType>> TransactionTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/transaction-types");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransactionType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read sales document transportation types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransportationType>> TransportationTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/transportation-types");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransportationType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sales_Document_LinksClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Sales_Document_LinksClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read document links
        /// </summary>
        /// <param name="sourceIDs">source document IDs</param>
        /// <param name="followUpID">follow-up document ID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LinkResponse>> LinksGetAsync(System.Collections.Generic.IEnumerable<int> sourceIDs = null, int? followUpID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/links?");
            if (sourceIDs != null)
            {
                foreach (var item_ in sourceIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (followUpID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("followUpID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(followUpID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create documents link
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LinkRequest> LinksPostAsync(LinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/links");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LinkRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove documents link
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LinkRequest> LinksDeleteAsync(LinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/links");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LinkRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read combined document links
        /// </summary>
        /// <param name="salesDocumentIDs">up to 100 sales document IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CombinedLinkResponse>> CombinedAsync(System.Collections.Generic.IEnumerable<int> salesDocumentIDs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (salesDocumentIDs == null)
                throw new System.ArgumentNullException("salesDocumentIDs");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/links/combined?");
            foreach (var item_ in salesDocumentIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("salesDocumentIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CombinedLinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read credit document links
        /// </summary>
        /// <param name="invoiceID">regular invoice ID</param>
        /// <param name="creditInvoiceID">credit invoiceID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<int>> CreditAsync(int? invoiceID = null, int? creditInvoiceID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/links/credit?");
            if (invoiceID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("invoiceID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invoiceID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creditInvoiceID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("creditInvoiceID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creditInvoiceID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sales_Document_Row_LinksClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Sales_Document_Row_LinksClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read links between sales document rows and purchase document rows
        /// </summary>
        /// <param name="salesDocumentIDs">up to 100 sales document IDs</param>
        /// <param name="purchaseDocumentIDs">up to 100 purchase document IDs</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SalesToPurchaseLink>> PurchaseRowLinksGetAsync(System.Collections.Generic.IEnumerable<int> salesDocumentIDs = null, System.Collections.Generic.IEnumerable<int> purchaseDocumentIDs = null, OrderBy4? orderBy = null, OrderByDirection4? orderByDirection = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/purchase-row-links?");
            if (salesDocumentIDs != null)
            {
                foreach (var item_ in salesDocumentIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("salesDocumentIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (purchaseDocumentIDs != null)
            {
                foreach (var item_ in purchaseDocumentIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("purchaseDocumentIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SalesToPurchaseLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create links between sales document rows and purchase document rows
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> PurchaseRowLinksPostAsync(CreateSalesToPurchaseLinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/purchase-row-links");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete links between sales document rows and purchase document rows
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> PurchaseRowLinksDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/purchase-row-links/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read links between sales document rows and inventory transfer document rows
        /// </summary>
        /// <param name="salesDocumentIDs">up to 100 sales document IDs</param>
        /// <param name="transferDocumentIDs">up to 100 transfer document IDs</param>
        /// <param name="orderBy">field to order by</param>
        /// <param name="orderByDirection">direction to order by</param>
        /// <param name="skip">skip n records</param>
        /// <param name="take">items to take, default: 20, max: 100000</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SalesToTransferLink>> TransferRowLinksGetAsync(System.Collections.Generic.IEnumerable<int> salesDocumentIDs = null, System.Collections.Generic.IEnumerable<int> transferDocumentIDs = null, OrderBy5? orderBy = null, OrderByDirection5? orderByDirection = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/transfer-row-links?");
            if (salesDocumentIDs != null)
            {
                foreach (var item_ in salesDocumentIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("salesDocumentIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (transferDocumentIDs != null)
            {
                foreach (var item_ in transferDocumentIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("transferDocumentIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderByDirection != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderByDirection") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderByDirection, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SalesToTransferLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create links between sales document rows and transfer document rows
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> TransferRowLinksPostAsync(CreateSalesToTransferLinkRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/transfer-row-links");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete links between sales document rows and transfer document rows
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> TransferRowLinksDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/sales/documents/rows/transfer-row-links/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebShop_NumbersClient 
    {
        private string _baseUrl = "https://api-sales-eu.erply.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public WebShop_NumbersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read web-shop numbers
        /// </summary>
        /// <param name="invoiceIDs">Search by invoice IDs</param>
        /// <param name="number">Search by the number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WebShopNumber>> WebShopNumbersGetAsync(System.Collections.Generic.IEnumerable<int> invoiceIDs = null, string number = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/web-shop-numbers?");
            if (invoiceIDs != null)
            {
                foreach (var item_ in invoiceIDs) { urlBuilder_.Append(System.Uri.EscapeDataString("invoiceIDs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (number != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WebShopNumber>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a web-shop number
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> WebShopNumbersPostAsync(CreateWebShopNumberRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/web-shop-numbers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete web-shop numbers
        /// </summary>
        /// <param name="ids">up to 100 semicolon delimited IDs</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkResponse> WebShopNumbersDeleteAsync(string ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/web-shop-numbers/{ids}");
            urlBuilder_.Replace("{ids}", System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a web-shop number
        /// </summary>
        /// <param name="id">web-shop number ID</param>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> WebShopNumbersPatchAsync(int id, UpdateWebShopNumberRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/web-shop-numbers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MessageResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Incoterm
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby")]
        public string Addedby { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby")]
        public string Changedby { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionType
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby")]
        public string Addedby { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby")]
        public string Changedby { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportationType
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby")]
        public string Addedby { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// username
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby")]
        public string Changedby { get; set; }

        /// <summary>
        /// object ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public Translatable Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Translatable
    {

        [System.Text.Json.Serialization.JsonPropertyName("ar")]
        public string Ar { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("da")]
        public string Da { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("de")]
        public string De { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("el")]
        public string El { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("en")]
        public string En { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("es")]
        public string Es { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("et")]
        public string Et { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fi")]
        public string Fi { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fo")]
        public string Fo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fr")]
        public string Fr { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("it")]
        public string It { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lt")]
        public string Lt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lv")]
        public string Lv { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nl")]
        public string Nl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pl")]
        public string Pl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ru")]
        public string Ru { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sv")]
        public string Sv { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("th")]
        public string Th { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tr")]
        public string Tr { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vi")]
        public string Vi { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zh_Hans")]
        public string Zh_Hans { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zh_Hant")]
        public string Zh_Hant { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombinedLinkResponse
    {
        /// <summary>
        /// can be returned if provided invoice is not credit invoice
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditDocuments")]
        public System.Collections.Generic.ICollection<Document> CreditDocuments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public Document Document { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("followUpDocuments")]
        public LinkResponseWithNumbers FollowUpDocuments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceDocuments")]
        public System.Collections.Generic.ICollection<LinkResponseWithNumbers> SourceDocuments { get; set; }

        /// <summary>
        /// can be returned if provided invoice is credit invoice
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoice")]
        public Document SourceInvoice { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UrlResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Request
    {
        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailBody")]
        public string EmailBody { get; set; }

        /// <summary>
        /// document language, 3 letter ERPLY legacy language code. Is required for PDF attachment generation. Default is 'eng'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailLanguage")]
        public string EmailLanguage { get; set; }

        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailSubject")]
        public string EmailSubject { get; set; }

        /// <summary>
        /// optional parameter, A4 or Letter, default value is A4
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paperSize")]
        public string PaperSize { get; set; }

        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recipientEmail")]
        public string RecipientEmail { get; set; }

        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDocID")]
        public int? SalesDocID { get; set; }

        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("senderEmail")]
        public string SenderEmail { get; set; }

        /// <summary>
        /// required field
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("senderName")]
        public string SenderName { get; set; }

        /// <summary>
        /// custom printout template ID, use List Templates endpoint to get the ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("templateID")]
        public int? TemplateID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Requests
    {

        [System.Text.Json.Serialization.JsonPropertyName("requests")]
        public System.Collections.Generic.ICollection<Request> Requests1 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageStatuses
    {

        [System.Text.Json.Serialization.JsonPropertyName("notSentMessageIDs")]
        public System.Collections.Generic.ICollection<int> NotSentMessageIDs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sentMessageIDs")]
        public System.Collections.Generic.ICollection<int> SentMessageIDs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string Error { get; set; }

        /// <summary>
        /// will be present only if message was sent
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("messageID")]
        public int? MessageID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocumentID")]
        public int? SalesDocumentID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSalesToPurchaseLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CreateSalesToPurchaseLinkRequestItem> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSalesToPurchaseLinkRequestItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("linkedQuantity")]
        public double? LinkedQuantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocID")]
        public int? PurchaseDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseRowID")]
        public int? PurchaseRowID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocID")]
        public int? SalesDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesRowID")]
        public int? SalesRowID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSalesToTransferLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CreateSalesToTransferLinkRequestItem> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSalesToTransferLinkRequestItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("linkedQuantity")]
        public double? LinkedQuantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocID")]
        public int? SalesDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesRowID")]
        public int? SalesRowID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferDocID")]
        public int? TransferDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferRowID")]
        public int? TransferRowID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActualReportsTemplate
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("modified")]
        public string Modified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public bool? Owner { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWebShopNumberRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceID")]
        public int? InvoiceID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWebShopNumberRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebShopNumber
    {

        [System.Text.Json.Serialization.JsonPropertyName("ID")]
        public int? ID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceID")]
        public int? InvoiceID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("ids")]
        public System.Collections.Generic.ICollection<int> Ids { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Document
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("followUpDocumentIDs")]
        public System.Collections.Generic.ICollection<int> FollowUpDocumentIDs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceDocumentID")]
        public int? SourceDocumentID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("followUpDocumentIDs")]
        public System.Collections.Generic.ICollection<int> FollowUpDocumentIDs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceDocumentID")]
        public int? SourceDocumentID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkResponseWithNumbers
    {

        [System.Text.Json.Serialization.JsonPropertyName("followUpDocuments")]
        public System.Collections.Generic.ICollection<Document> FollowUpDocuments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceDocument")]
        public Document SourceDocument { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonInvoicedRowResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDocumentID")]
        public int? SalesDocumentID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unfulfilledRows")]
        public System.Collections.Generic.ICollection<RowResponse> UnfulfilledRows { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RowResponse
    {
        /// <summary>
        /// Sold quantity. effectively contains a decimal (eg. 4.25). Negative values are allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double? Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attendantID")]
        public int? AttendantID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("billingDateFrom")]
        public string BillingDateFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("billingDateTo")]
        public string BillingDateTo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerRequestedDeliveryDate")]
        public string CustomerRequestedDeliveryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Discount applied to the price above. This is a percentage value, in the range from 0 to 100. Can be negative
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double? Discount { get; set; }

        /// <summary>
        /// Arbitrary extra data. Can be modified with JSON API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("jdoc")]
        public System.Collections.Generic.ICollection<int> Jdoc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numberOfPackages")]
        public double? NumberOfPackages { get; set; }

        /// <summary>
        /// Product package type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("packageID")]
        public int? PackageID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]
        public string ProductCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productID")]
        public int? ProductID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("returnReasonCodeID")]
        public int? ReturnReasonCodeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rowID")]
        public int? RowID { get; set; }

        /// <summary>
        /// An invoice row cannot be a product and a service at the same time!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("serviceID")]
        public int? ServiceID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("taxRateID")]
        public int? TaxRateID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitName")]
        public string UnitName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("waybillID")]
        public int? WaybillID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleDocument
    {
        /// <summary>
        /// ClientName string `json:"clientName"`
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressID")]
        public int? AddressID { get; set; }

        /// <summary>
        /// ID of the original invoice that a credit invoice links to.
        /// <br/>This field must only be populated for credit invoices, not other types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditToID")]
        public int? CreditToID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]
        public int? CurrencyID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencyRate")]
        public double? CurrencyRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerContactID")]
        public int? CustomerContactID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerID")]
        public int? CustomerID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("doNotPrintDeadline")]
        public bool? DoNotPrintDeadline { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dueDays")]
        public int? DueDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideDiscountOnPrintout")]
        public bool? HideDiscountOnPrintout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideInvoiceTotalOnPrintout")]
        public bool? HideInvoiceTotalOnPrintout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hidePricesOnPrintout")]
        public bool? HidePricesOnPrintout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideQuantitiesOnPrintout")]
        public bool? HideQuantitiesOnPrintout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        public string InternalNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceCreatorID")]
        public int? InvoiceCreatorID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceCustomNumber")]
        public string InvoiceCustomNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDate")]
        public string InvoiceDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public int? InvoiceNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumberSuffix")]
        public string InvoiceNumberSuffix { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoiceTime")]
        public string InvoiceTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isConfirmed")]
        public bool? IsConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netTotal")]
        public double? NetTotal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderFulfillmentStatus")]
        public string OrderFulfillmentStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderTrackingNumber")]
        public string OrderTrackingNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payerAddressID")]
        public int? PayerAddressID { get; set; }

        /// <summary>
        /// This field can have two different meanings — “Payer” or “Ship To”.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payerID")]
        public int? PayerID { get; set; }

        /// <summary>
        /// UNPAID, PAID, CREDITED
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentState")]
        public string PaymentState { get; set; }

        /// <summary>
        /// Expected payment method (cash, card etc).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentTypeID")]
        public int? PaymentTypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("posID")]
        public int? PosID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentAmount")]
        public double? PrepaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentPercent")]
        public int? PrepaymentPercent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("printOriginalNames")]
        public int? PrintOriginalNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectID")]
        public int? ProjectID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rounding")]
        public double? Rounding { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shipToContactID")]
        public int? ShipToContactID { get; set; }

        /// <summary>
        /// Document status:
        /// <br/>			1 - draft
        /// <br/>			2 - sent by email
        /// <br/>			3 - printed
        /// <br/>			5 - ready
        /// <br/>			7 - delivered
        /// <br/>			8 - fulfilled
        /// <br/>			9 - canceled
        /// <br/>			10 - won
        /// <br/>			11 - lost
        /// <br/>			12 - invoice created
        /// <br/>			13 - refunded
        /// <br/>			14 - added to store credit
        /// <br/>			15 - e-invoice pending
        /// <br/>			16 - e-invoice sent
        /// <br/>			17 - e-invoice sending failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("taxTotal")]
        public double? TaxTotal { get; set; }

        /// <summary>
        /// Derived field: net total + tax total + rounding.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public double? Total { get; set; }

        /// <summary>
        /// Possible values are "DOMESTIC", "EU", "OUTSIDE_EU", "EU_WITH_VAT"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeID")]
        public int? TypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("warehouseID")]
        public int? WarehouseID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webShopNumbers")]
        public System.Collections.Generic.ICollection<WebShopNumber> WebShopNumbers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesToPurchaseLink
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("linkedQuantity")]
        public double? LinkedQuantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocDate")]
        public string PurchaseDocDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocID")]
        public int? PurchaseDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocNumber")]
        public int? PurchaseDocNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocSupplierName")]
        public string PurchaseDocSupplierName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocSupplierNumber")]
        public int? PurchaseDocSupplierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocTypeID")]
        public int? PurchaseDocTypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseDocTypeName")]
        public string PurchaseDocTypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseRowID")]
        public int? PurchaseRowID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocID")]
        public int? SalesDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocStatusID")]
        public int? SalesDocStatusID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocStatusName")]
        public string SalesDocStatusName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocTypeID")]
        public int? SalesDocTypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocTypeName")]
        public string SalesDocTypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesRowID")]
        public int? SalesRowID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesToTransferLink
    {
        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        public int? Added { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addedby_id")]
        public int? Addedby_id { get; set; }

        /// <summary>
        /// Unix timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changed")]
        public int? Changed { get; set; }

        /// <summary>
        /// user ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("changedby_id")]
        public int? Changedby_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("linkedQuantity")]
        public double? LinkedQuantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocID")]
        public int? SalesDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocStatusID")]
        public int? SalesDocStatusID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocStatusName")]
        public string SalesDocStatusName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocTypeID")]
        public int? SalesDocTypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesDocTypeName")]
        public string SalesDocTypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salesRowID")]
        public int? SalesRowID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        public string TransferDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferDocID")]
        public int? TransferDocID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferNumber")]
        public int? TransferNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferRowID")]
        public int? TransferRowID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferSourceWarehouseID")]
        public int? TransferSourceWarehouseID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferSourceWarehouseName")]
        public string TransferSourceWarehouseName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferStatusID")]
        public int? TransferStatusID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferStatusName")]
        public string TransferStatusName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferTypeID")]
        public int? TransferTypeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferTypeName")]
        public string TransferTypeName { get; set; }

    }

    /// <summary>
    /// Search by state. DEPRECATED, please use the states filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    /// <summary>
    /// Search by payment state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNPAID")]
        UNPAID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDITED")]
        CREDITED = 2,

    }

    /// <summary>
    /// field to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"typeID")]
        TypeID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyID")]
        CurrencyID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"customerID")]
        CustomerID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"addressID")]
        AddressID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"payerID")]
        PayerID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"payerAddressID")]
        PayerAddressID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"customerContactID")]
        CustomerContactID = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"shipToContactID")]
        ShipToContactID = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"warehouseID")]
        WarehouseID = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"posID")]
        PosID = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreatorID")]
        InvoiceCreatorID = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"projectID")]
        ProjectID = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentTypeID")]
        PaymentTypeID = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"state")]
        State = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentState")]
        PaymentState = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumber")]
        InvoiceNumber = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumberSuffix")]
        InvoiceNumberSuffix = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"orderTrackingNumber")]
        OrderTrackingNumber = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"orderFulfillmentStatus")]
        OrderFulfillmentStatus = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceDate")]
        InvoiceDate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceTime")]
        InvoiceTime = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDays")]
        DueDays = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"doNotPrintDeadline")]
        DoNotPrintDeadline = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentAmount")]
        PrepaymentAmount = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentPercent")]
        PrepaymentPercent = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"isConfirmed")]
        IsConfirmed = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"notes")]
        Notes = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"internalNotes")]
        InternalNotes = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyRate")]
        CurrencyRate = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"netTotal")]
        NetTotal = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"taxTotal")]
        TaxTotal = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"rounding")]
        Rounding = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"total")]
        Total = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"hideDiscountOnPrintout")]
        HideDiscountOnPrintout = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"hidePricesOnPrintout")]
        HidePricesOnPrintout = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"hideQuantitiesOnPrintout")]
        HideQuantitiesOnPrintout = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"hideInvoiceTotalOnPrintout")]
        HideInvoiceTotalOnPrintout = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"printOriginalNames. invoiceCustomNumber")]
        PrintOriginalNames__invoiceCustomNumber = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 39,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Search by state. DEPRECATED, please use the states filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    /// <summary>
    /// Search by payment state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentState2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNPAID")]
        UNPAID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDITED")]
        CREDITED = 2,

    }

    /// <summary>
    /// field to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderBy2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"typeID")]
        TypeID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyID")]
        CurrencyID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"customerID")]
        CustomerID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"addressID")]
        AddressID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"payerID")]
        PayerID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"payerAddressID")]
        PayerAddressID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"customerContactID")]
        CustomerContactID = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"shipToContactID")]
        ShipToContactID = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"warehouseID")]
        WarehouseID = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"posID")]
        PosID = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreatorID")]
        InvoiceCreatorID = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"projectID")]
        ProjectID = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentTypeID")]
        PaymentTypeID = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"state")]
        State = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentState")]
        PaymentState = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumber")]
        InvoiceNumber = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumberSuffix")]
        InvoiceNumberSuffix = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"orderTrackingNumber")]
        OrderTrackingNumber = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"orderFulfillmentStatus")]
        OrderFulfillmentStatus = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceDate")]
        InvoiceDate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceTime")]
        InvoiceTime = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDays")]
        DueDays = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"doNotPrintDeadline")]
        DoNotPrintDeadline = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentAmount")]
        PrepaymentAmount = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentPercent")]
        PrepaymentPercent = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"isConfirmed")]
        IsConfirmed = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"notes")]
        Notes = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"internalNotes")]
        InternalNotes = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyRate")]
        CurrencyRate = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"netTotal")]
        NetTotal = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"taxTotal")]
        TaxTotal = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"rounding")]
        Rounding = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"total")]
        Total = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"hideDiscountOnPrintout")]
        HideDiscountOnPrintout = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"hidePricesOnPrintout")]
        HidePricesOnPrintout = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"hideQuantitiesOnPrintout")]
        HideQuantitiesOnPrintout = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"hideInvoiceTotalOnPrintout")]
        HideInvoiceTotalOnPrintout = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"printOriginalNames. invoiceCustomNumber")]
        PrintOriginalNames__invoiceCustomNumber = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 39,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// Search by state. DEPRECATED, please use the states filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sent by email")]
        Sent_by_email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
        Delivered = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"won")]
        Won = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lost")]
        Lost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreated")]
        InvoiceCreated = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"addedToStoreCredit")]
        AddedToStoreCredit = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoicePending")]
        EInvoicePending = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSent")]
        EInvoiceSent = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoiceSendingFailed")]
        EInvoiceSendingFailed = 14,

    }

    /// <summary>
    /// Search by payment state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentState3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNPAID")]
        UNPAID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDITED")]
        CREDITED = 2,

    }

    /// <summary>
    /// field to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderBy3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"typeID")]
        TypeID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyID")]
        CurrencyID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"customerID")]
        CustomerID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"addressID")]
        AddressID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"payerID")]
        PayerID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"payerAddressID")]
        PayerAddressID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"customerContactID")]
        CustomerContactID = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"shipToContactID")]
        ShipToContactID = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"warehouseID")]
        WarehouseID = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"posID")]
        PosID = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceCreatorID")]
        InvoiceCreatorID = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"projectID")]
        ProjectID = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentTypeID")]
        PaymentTypeID = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"state")]
        State = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentState")]
        PaymentState = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumber")]
        InvoiceNumber = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceNumberSuffix")]
        InvoiceNumberSuffix = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"orderTrackingNumber")]
        OrderTrackingNumber = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"orderFulfillmentStatus")]
        OrderFulfillmentStatus = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceDate")]
        InvoiceDate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceTime")]
        InvoiceTime = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDays")]
        DueDays = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"doNotPrintDeadline")]
        DoNotPrintDeadline = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentAmount")]
        PrepaymentAmount = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaymentPercent")]
        PrepaymentPercent = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"isConfirmed")]
        IsConfirmed = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"notes")]
        Notes = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"internalNotes")]
        InternalNotes = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"currencyRate")]
        CurrencyRate = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"netTotal")]
        NetTotal = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"taxTotal")]
        TaxTotal = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"rounding")]
        Rounding = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"total")]
        Total = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"hideDiscountOnPrintout")]
        HideDiscountOnPrintout = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"hidePricesOnPrintout")]
        HidePricesOnPrintout = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"hideQuantitiesOnPrintout")]
        HideQuantitiesOnPrintout = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"hideInvoiceTotalOnPrintout")]
        HideInvoiceTotalOnPrintout = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"printOriginalNames. invoiceCustomNumber")]
        PrintOriginalNames__invoiceCustomNumber = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 39,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// field to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderBy4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salesRowID")]
        SalesRowID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocID")]
        SalesDocID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseRowID")]
        PurchaseRowID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocID")]
        PurchaseDocID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"linkedQuantity")]
        LinkedQuantity = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocTypeID")]
        PurchaseDocTypeID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocTypeName")]
        PurchaseDocTypeName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocNumber")]
        PurchaseDocNumber = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocSupplierNumber")]
        PurchaseDocSupplierNumber = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocSupplierName")]
        PurchaseDocSupplierName = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseDocDate")]
        PurchaseDocDate = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocTypeID")]
        SalesDocTypeID = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocTypeName")]
        SalesDocTypeName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocStatusID")]
        SalesDocStatusID = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"added")]
        Added = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"changed")]
        Changed = 18,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// field to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderBy5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salesRowID")]
        SalesRowID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocID")]
        SalesDocID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"transferRowID")]
        TransferRowID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"transferDocID")]
        TransferDocID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"linkedQuantity")]
        LinkedQuantity = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"transferTypeID")]
        TransferTypeID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"transferTypeName")]
        TransferTypeName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"transferStatusID")]
        TransferStatusID = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"transferStatusName")]
        TransferStatusName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"transferNumber")]
        TransferNumber = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"transferDate")]
        TransferDate = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"transferSourceWarehouseID")]
        TransferSourceWarehouseID = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"transferSourceWarehouseName")]
        TransferSourceWarehouseName = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocTypeID")]
        SalesDocTypeID = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocTypeName")]
        SalesDocTypeName = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocStatusID")]
        SalesDocStatusID = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"salesDocStatusName")]
        SalesDocStatusName = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"added")]
        Added = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"changed")]
        Changed = 19,

    }

    /// <summary>
    /// direction to order by
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderByDirection5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>
    /// paper size, can be A4 or Letter, default is A4
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaperSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Letter")]
        Letter = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603